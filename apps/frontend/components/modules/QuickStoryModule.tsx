import React, { useState, useEffect, useRef, useCallback } from 'react';
import { ApiSettings, QuickStoryModuleState, QuickStoryTask, QuickStoryActiveTab, ActiveModule, SequelStoryResult, UserProfile, QuickStoryWordStats, QuickStoryQualityStats } from '../../types';
import { STORY_LENGTH_OPTIONS, WRITING_STYLE_OPTIONS, HOOK_LANGUAGE_OPTIONS } from '../../constants';
import { generateText } from '../../services/textGenerationService';
import { checkAndTrackRequest, REQUEST_ACTIONS, getUserUsageStatus, recordUsage } from '../../services/requestTrackingService';
import { delay, isSubscribed } from '../../utils';
import { logApiCall, logTextRewritten } from '../../services/usageService';
import { getTimeUntilReset } from '../../services/localRequestCounter';
import ModuleContainer from '../ModuleContainer';
import LoadingSpinner from '../LoadingSpinner';
import ErrorAlert from '../ErrorAlert';
import InfoBox from '../InfoBox';
import UpgradePrompt from '../UpgradePrompt';
import { Trash2, PlusCircle, Square, Play, Trash, Clipboard, ClipboardCheck, ChevronsRight, BookCopy, Zap, Save, Download, Loader2 } from 'lucide-react';

// Advanced retry logic with exponential backoff for API calls (from RewriteModule)
const retryApiCall = async (
  apiFunction: () => Promise<any>,
  maxRetries: number = 3,
  isQueueMode: boolean = false
): Promise<any> => {
  for (let i = 0; i < maxRetries; i++) {
    try {
      return await apiFunction();
    } catch (error: any) {
      console.log('QuickStory Retry - Error details:', { 
        message: error?.message, 
        status: error?.status, 
        code: error?.code,
        attempt: i + 1 
      });
      
      const isServerError = error?.message?.includes('500') || 
                           error?.message?.includes('Internal Server Error') ||
                           error?.message?.includes('ServerError') ||
                           error?.status === 500 ||
                           error?.code === 500;
                           
      const is503Error = error?.message?.includes('503') ||
                         error?.message?.includes('Service Unavailable') ||
                         error?.status === 503 ||
                         error?.code === 503;
      
      if ((isServerError || is503Error) && i < maxRetries - 1) {
        // Special handling for 503 errors - longer delays (1min, 2min, 4min)
        let backoffDelay;
        if (is503Error) {
          const baseDelay503 = 60000; // 1 minute base delay for 503
          backoffDelay = baseDelay503 * Math.pow(2, i);
          console.warn(`üö® QuickStory 503 SERVICE UNAVAILABLE: Extended retry (attempt ${i + 1}/${maxRetries}), waiting ${Math.round(backoffDelay/1000)}s... [Queue mode: ${isQueueMode}]`);
        } else {
          // Regular 500 errors - shorter delays
          const baseDelay = isQueueMode ? 6000 : 4000;
          backoffDelay = baseDelay * Math.pow(2, i);
          console.warn(`üîÑ QuickStory RETRY: API call failed (attempt ${i + 1}/${maxRetries}), retrying in ${backoffDelay}ms... [Queue mode: ${isQueueMode}]`);
        }
        await delay(backoffDelay);
        continue;
      }
      console.error(`‚ùå QuickStory FINAL FAILURE: All ${maxRetries} retry attempts failed. Error:`, error);
      throw error;
    }
  }
  throw new Error('All retry attempts failed');
};

interface QuickStoryModuleProps {
  apiSettings: ApiSettings;
  moduleState: QuickStoryModuleState;
  setModuleState: React.Dispatch<React.SetStateAction<QuickStoryModuleState>>;
  addHistoryItem: (itemData: any) => void;
  currentUser: UserProfile | null;
}

const QuickStoryModule: React.FC<QuickStoryModuleProps> = ({
    apiSettings, moduleState, setModuleState, addHistoryItem, currentUser
}) => {
    const {
        activeTab, targetLength, writingStyle, customWritingStyle, outputLanguage,
        // Quick Batch Tab
        title, referenceViralStoryForStyle, tasks, isProcessingQueue,
        // Sequel Generator Tab
        sequelInputStories, sequelNumTitlesToSuggest, sequelSuggestedTitles, sequelSelectedTitles,
        sequelGeneratedStories, sequelIsGeneratingTitles, sequelIsGeneratingStories, sequelProgressMessage, sequelError,
        // ADN Management
        adnSetName, savedAdnSets
    } = moduleState;

    const queueAbortControllerRef = useRef<AbortController | null>(null);
    const sequelAbortControllerRef = useRef<AbortController | null>(null);
    const [copiedStates, setCopiedStates] = useState<Record<string, boolean>>({});
    const [selectedAdnSetName, setSelectedAdnSetName] = useState('');
    
    // Quality analysis toggle - default ON for accurate full-text analysis
    const [enableQualityAnalysis, setEnableQualityAnalysis] = useState<boolean>(true);
    
    // Subscription check
    const hasActiveSubscription = isSubscribed(currentUser);
    
    // Usage tracking state from backend
    const [usageStats, setUsageStats] = useState({ current: 0, limit: 999999, remaining: 999999, percentage: 0, isBlocked: false } as any);
    
    // Thay th·∫ø useEffect c≈© b·∫±ng logic m·ªõi
    useEffect(() => {
        const fetchUsage = async () => {
            try {
                const status = await getUserUsageStatus();
                if (status.success) {
                    setUsageStats(status.data.usage);
                }
            } catch (error) {
                console.error('Failed to fetch usage status:', error);
            }
        };
        fetchUsage(); // Initial fetch
        const interval = setInterval(fetchUsage, 60000); // Poll every minute
        return () => clearInterval(interval);
    }, []);

    const updateState = (updates: Partial<QuickStoryModuleState>) => {
        setModuleState(prev => ({ ...prev, ...updates }));
    };

    // Helper: check & track usage with backend and sync local counter box
    const checkAndTrackQuickRequest = async (action: string, itemCount: number = 1) => {
        try {
            const result = await checkAndTrackRequest(action, itemCount);
            // Sync UI usage box with backend numbers
            if (result?.usage) {
                setUsageStats({
                    current: result.usage.current,
                    limit: result.usage.limit,
                    remaining: result.usage.remaining,
                    percentage: result.usage.percentage,
                    canUse: result.usage.current < result.usage.limit,
                    isBlocked: !!result.blocked
                });
            }
            if (result.blocked) {
                return {
                    allowed: false,
                    message: result.message,
                    stats: result.usage
                } as const;
            }
            // Removed warning handling as it's not in the new interface
            return { allowed: true, stats: result.usage, message: result.message } as const;
        } catch (error) {
            console.warn('Backend request check failed, proceeding with local counter');
            return { allowed: true } as const;
        }
    };

    const updateTask = (taskId: string, updates: Partial<QuickStoryTask>) => {
        setModuleState(prev => ({
            ...prev,
            tasks: prev.tasks.map(task =>
                task.id === taskId ? { ...task, ...updates } : task
            )
        }));
    };
    
    // Calculate word statistics
    const calculateWordStats = (originalText: string, generatedText: string) => {
        const countWords = (text: string) => {
            return text.trim().split(/\s+/).filter(word => word.length > 0).length;
        };

        const originalWords = countWords(originalText || '');
        const generatedWords = countWords(generatedText);
        
        // Simple word change calculation
        const originalWordsArray = (originalText || '').toLowerCase().trim().split(/\s+/);
        const generatedWordsArray = generatedText.toLowerCase().trim().split(/\s+/);
        
        let wordsChanged = 0;
        const maxLength = Math.max(originalWordsArray.length, generatedWordsArray.length);
        
        for (let i = 0; i < maxLength; i++) {
            const originalWord = originalWordsArray[i] || '';
            const generatedWord = generatedWordsArray[i] || '';
            if (originalWord !== generatedWord) {
                wordsChanged++;
            }
        }

        const changePercentage = originalWords > 0 ? Math.round((wordsChanged / originalWords) * 100) : 0;

        return {
            originalWords,
            generatedWords,
            wordsChanged,
            changePercentage
        };
    };

    // Calculate story quality and consistency statistics (FULL TEXT ANALYSIS)
    const analyzeStoryQuality = async (titleUsed: string, generatedStory: string) => {
        try {
            // Full text analysis for maximum accuracy
            const analysisPrompt = `B·∫°n l√† chuy√™n gia ph√¢n t√≠ch vƒÉn h·ªçc chuy√™n nghi·ªáp. H√£y ph√¢n t√≠ch ƒë·ªô nh·∫•t qu√°n v√† ho√†n thi·ªán c·ªßa to√†n b·ªô c√¢u chuy·ªán ƒë√£ ƒë∆∞·ª£c t·∫°o.

**TI√äU ƒê·ªÄ TRUY·ªÜN:**
"${titleUsed}"

**TO√ÄN B·ªò C√ÇU CHUY·ªÜN ƒê√É T·∫†O:**
---
${generatedStory}
---

**Y√äU C·∫¶U:** Ph√¢n t√≠ch to√†n b·ªô c√¢u chuy·ªán v√† tr·∫£ v·ªÅ JSON ch√≠nh x√°c:

{
  "consistencyScore": [s·ªë 0-100],
  "completenessScore": [s·ªë 0-100], 
  "overallQualityScore": [s·ªë 0-100],
  "analysis": {
    "characterConsistency": "[ph√¢n t√≠ch nh√¢n v·∫≠t - 1-2 c√¢u]",
    "plotCoherence": "[ph√¢n t√≠ch c·ªët truy·ªán - 1-2 c√¢u]", 
    "timelineConsistency": "[ph√¢n t√≠ch th·ªùi gian - 1-2 c√¢u]",
    "settingConsistency": "[ph√¢n t√≠ch b·ªëi c·∫£nh - 1-2 c√¢u]",
    "overallAssessment": "[ƒë√°nh gi√° t·ªïng th·ªÉ - 2-3 c√¢u]"
  }
}

**TI√äU CH√ç:**
- consistencyScore: T√≠nh nh·∫•t qu√°n nh√¢n v·∫≠t, b·ªëi c·∫£nh, th·ªùi gian trong TO√ÄN B·ªò c√¢u chuy·ªán
- completenessScore: ƒê·ªô ho√†n thi·ªán c·ªët truy·ªán t·ª´ ƒë·∫ßu ƒë·∫øn cu·ªëi theo ti√™u ƒë·ªÅ
- overallQualityScore: Ch·∫•t l∆∞·ª£ng t·ªïng th·ªÉ = (consistencyScore + completenessScore)/2

Ch·ªâ tr·∫£ v·ªÅ JSON.`;

            const result = await retryApiCall(() => generateText(analysisPrompt, undefined, false, apiSettings), 3, false);
            const jsonMatch = result?.text.match(/\{[\s\S]*\}/);
            
            if (jsonMatch) {
                const analysisData = JSON.parse(jsonMatch[0]);
                return analysisData;
            }
            
            // Fallback n·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON
            return {
                consistencyScore: 75,
                completenessScore: 80,
                overallQualityScore: 77,
                analysis: {
                    characterConsistency: "Nh√¢n v·∫≠t t∆∞∆°ng ƒë·ªëi nh·∫•t qu√°n",
                    plotCoherence: "C·ªët truy·ªán c√≥ logic t·ªët", 
                    timelineConsistency: "Th·ªùi gian h·ª£p l√Ω",
                    settingConsistency: "B·ªëi c·∫£nh ·ªïn ƒë·ªãnh",
                    overallAssessment: "Ch·∫•t l∆∞·ª£ng t·ªïng th·ªÉ kh√° t·ªët, ph√¢n t√≠ch to√†n b·ªô vƒÉn b·∫£n"
                }
            };
        } catch (error) {
            console.error('Story quality analysis error:', error);
            return {
                consistencyScore: 70,
                completenessScore: 70,
                overallQualityScore: 70,
                analysis: {
                    characterConsistency: "L·ªói ph√¢n t√≠ch to√†n b·ªô vƒÉn b·∫£n",
                    plotCoherence: "L·ªói ph√¢n t√≠ch to√†n b·ªô vƒÉn b·∫£n",
                    timelineConsistency: "L·ªói ph√¢n t√≠ch to√†n b·ªô vƒÉn b·∫£n", 
                    settingConsistency: "L·ªói ph√¢n t√≠ch to√†n b·ªô vƒÉn b·∫£n",
                    overallAssessment: "C·∫ßn ki·ªÉm tra th·ªß c√¥ng - l·ªói ph√¢n t√≠ch to√†n b·ªô"
                }
            };
        }
    };
    
    // ----- START: QUICK BATCH LOGIC -----
    
    const processTask = async (task: QuickStoryTask, abortSignal: AbortSignal): Promise<string> => {
        const { settings, title } = task;
        const { targetLength, writingStyle, customWritingStyle, outputLanguage, referenceViralStoryForStyle } = settings;
    
        let currentStoryStyle = writingStyle;
        if (writingStyle === 'custom') {
            currentStoryStyle = customWritingStyle;
        } else {
            currentStoryStyle = WRITING_STYLE_OPTIONS.find(opt => opt.value === writingStyle)?.label || writingStyle;
        }
        
        const outputLanguageLabel = HOOK_LANGUAGE_OPTIONS.find(opt => opt.value === outputLanguage)?.label || outputLanguage;
    
        // ‚úÖ Usage already tracked at batch level when user clicked "Generate"
        // No additional tracking needed during individual story processing
        // Generate Outline
        updateTask(task.id, { progressMessage: 'B∆∞·ªõc 1/3: ƒêang t·∫°o d√†n √Ω...' });
        const outlinePrompt = `T·∫°o m·ªôt d√†n √Ω chi ti·∫øt cho m·ªôt c√¢u chuy·ªán c√≥ ti√™u ƒë·ªÅ "${title}". D√†n √Ω ph·∫£i logic, c√≥ m·ªü ƒë·∫ßu, ph√°t tri·ªÉn, cao tr√†o v√† k·∫øt th√∫c. D√†n √Ω ph·∫£i ƒë∆∞·ª£c vi·∫øt b·∫±ng ${outputLanguageLabel}.`;
        const outlineResult = await retryApiCall(() => generateText(outlinePrompt, undefined, false, apiSettings), 3, true);
        const storyOutline = (outlineResult.text ?? '').trim();
        if (abortSignal.aborted) throw new DOMException('Aborted', 'AbortError');
        if (!storyOutline) throw new Error("Kh√¥ng th·ªÉ t·∫°o d√†n √Ω t·ª´ ti√™u ƒë·ªÅ.");
        await delay(500, abortSignal);
    
        // Step 2: Write Story in Chunks
        let fullStory = '';
        const CHUNK_WORD_COUNT = 1000;
        const currentTargetLengthNum = parseInt(targetLength);
        const numChunks = Math.ceil(currentTargetLengthNum / CHUNK_WORD_COUNT);
        
        let referenceStoryStylePromptSegment = '';
        if (referenceViralStoryForStyle?.trim()) {
            referenceStoryStylePromptSegment = `
            \n**Ph√¢n T√≠ch & H·ªçc T·∫≠p ADN Viral (QUAN TR·ªåNG NH·∫§T):**
            \nPh√¢n t√≠ch c√°c k·ªãch b·∫£n/truy·ªán tham kh·∫£o sau ƒë·ªÉ tr√≠ch xu·∫•t "ADN Viral" (C·∫•u tr√∫c M·ªü ƒë·∫ßu, Nh·ªãp ƒë·ªô, Xung ƒë·ªôt, Y·∫øu t·ªë C·∫£m x√∫c, K·ªπ thu·∫≠t Gi·ªØ ch√¢n, VƒÉn phong).
            \n√ÅP D·ª§NG c√°c nguy√™n t·∫Øc ƒë√£ h·ªçc ƒë·ªÉ vi·∫øt c√¢u chuy·ªán M·ªöI d·ª±a tr√™n "D√†n √Ω t·ªïng th·ªÉ".
            \nNGHI√äM C·∫§M sao ch√©p n·ªôi dung, nh√¢n v·∫≠t t·ª´ truy·ªán tham kh·∫£o.
            \n**B·ªò S∆ØU T·∫¨P K·ªäCH B·∫¢N THAM KH·∫¢O:**
            \n---
            \n${referenceViralStoryForStyle.trim()}
            \n---`;
        }

        for (let i = 0; i < numChunks; i++) {
            if (abortSignal.aborted) throw new DOMException('Aborted', 'AbortError');
            updateTask(task.id, { progressMessage: `B∆∞·ªõc 2/3: ƒêang vi·∫øt ph·∫ßn ${i + 1}/${numChunks}...` });
            const context = fullStory.length > 2000 ? '...\n' + fullStory.slice(-2000) : fullStory;
            const writePrompt = `B·∫°n l√† m·ªôt nh√† vƒÉn AI. D·ª±a v√†o d√†n √Ω sau, h√£y vi·∫øt ti·∫øp c√¢u chuy·ªán m·ªôt c√°ch li·ªÅn m·∫°ch B·∫∞NG NG√îN NG·ªÆ ${outputLanguageLabel}.
            Phong c√°ch vi·∫øt: "${currentStoryStyle}".
            ${referenceStoryStylePromptSegment}
            **D√†n √Ω t·ªïng th·ªÉ:**
${storyOutline}
            **N·ªôi dung ƒë√£ vi·∫øt (ng·ªØ c·∫£nh):**
${context || "ƒê√¢y l√† ph·∫ßn ƒë·∫ßu ti√™n."}
            **Y√™u c·∫ßu:** Vi·∫øt ph·∫ßn ti·∫øp theo c·ªßa c√¢u chuy·ªán, kho·∫£ng ${CHUNK_WORD_COUNT} t·ª´. Ch·ªâ vi·∫øt n·ªôi dung, kh√¥ng l·∫∑p l·∫°i, kh√¥ng ti√™u ƒë·ªÅ.`;
            
            if (i > 0) await delay(1000, abortSignal);
            const chunkResult = await retryApiCall(() => generateText(writePrompt, undefined, false, apiSettings), 3, true);
            fullStory += (fullStory ? '\n\n' : '') + ((chunkResult.text ?? '').trim() || '');
        }
        if (abortSignal.aborted) throw new DOMException('Aborted', 'AbortError');
        if (!fullStory.trim()) throw new Error("Kh√¥ng th·ªÉ vi·∫øt truy·ªán t·ª´ d√†n √Ω.");
        await delay(500, abortSignal);
    
        // Step 3: Post-Edit (no additional usage count - part of story creation)
        updateTask(task.id, { progressMessage: enableQualityAnalysis ? 'B∆∞·ªõc 3/4: ƒêang bi√™n t·∫≠p...' : 'B∆∞·ªõc 3/3: ƒêang bi√™n t·∫≠p...' });
        const minLength = Math.round(currentTargetLengthNum * 0.9);
        const maxLength = Math.round(currentTargetLengthNum * 1.1);
        const estimatedCurrentWordCount = fullStory.split(/\s+/).filter(Boolean).length;

        let actionVerb = "";
        let diffDescription = "";
        if (estimatedCurrentWordCount > maxLength) {
            actionVerb = "R√öT NG·∫ÆN";
            diffDescription = `kho·∫£ng ${estimatedCurrentWordCount - currentTargetLengthNum} t·ª´`;
        } else if (estimatedCurrentWordCount < minLength) {
            actionVerb = "M·ªû R·ªòNG";
            diffDescription = `kho·∫£ng ${currentTargetLengthNum - estimatedCurrentWordCount} t·ª´`;
        }
        
        const editPrompt = `B·∫°n l√† m·ªôt AI Bi√™n t·∫≠p vi√™n chuy√™n nghi·ªáp v·ªõi nhi·ªám v·ª• **TUY·ªÜT ƒê·ªêI** l√† ƒëi·ªÅu ch·ªânh ƒë·ªô d√†i c·ªßa vƒÉn b·∫£n theo y√™u c·∫ßu.

**M·ªÜNH L·ªÜNH T·ªêI TH∆Ø·ª¢NG (PRIORITY #1 - NON-NEGOTIABLE):**
Truy·ªán cu·ªëi c√πng **PH·∫¢I** c√≥ ƒë·ªô d√†i trong kho·∫£ng t·ª´ **${minLength} ƒë·∫øn ${maxLength} t·ª´**. M·ª•c ti√™u l√Ω t∆∞·ªüng l√† **${currentTargetLengthNum} t·ª´**.
-   Truy·ªán g·ªëc hi·ªán t·∫°i c√≥ kho·∫£ng **${estimatedCurrentWordCount} t·ª´**.
-   M·ªánh l·ªánh c·ªßa b·∫°n l√†: **${actionVerb} ${diffDescription}**. ƒê√¢y l√† nhi·ªám v·ª• quan tr·ªçng nh·∫•t, ph·∫£i ƒë∆∞·ª£c ∆∞u ti√™n tr√™n t·∫•t c·∫£ c√°c y·∫øu-t·ªë-kh√°c.

**CHI·∫æN L∆Ø·ª¢C BI√äN T·∫¨P B·∫ÆT BU·ªòC ƒê·ªÇ ƒê·∫†T M·ª§C TI√äU ƒê·ªò D√ÄI:**
-   **N·∫æU C·∫¶N R√öT NG·∫ÆN (BE RUTHLESS):**
    -   **C·∫ÆT B·ªé KH√îNG TH∆Ø∆†NG TI·∫æC:** Lo·∫°i b·ªè c√°c ƒëo·∫°n m√¥ t·∫£ d√†i d√≤ng, c√°c ƒëo·∫°n h·ªôi tho·∫°i ph·ª• kh√¥ng tr·ª±c ti·∫øp th√∫c ƒë·∫©y c·ªët truy·ªán, c√°c t√¨nh ti·∫øt ho·∫∑c nh√¢n v·∫≠t ph·ª• √≠t quan tr·ªçng.
    -   **C√î ƒê·ªåNG H√ìA:** Vi·∫øt l·∫°i c√°c c√¢u d√†i, ph·ª©c t·∫°p th√†nh c√°c c√¢u ng·∫Øn g·ªçn, s√∫c t√≠ch h∆°n. Thay v√¨ m√¥ t·∫£ m·ªôt h√†nh ƒë·ªông trong 3 c√¢u, h√£y l√†m n√≥ trong 1 c√¢u.
    -   **T√ìM L∆Ø·ª¢C:** Thay v√¨ k·ªÉ chi ti·∫øt m·ªôt s·ª± ki·ªán k√©o d√†i, h√£y t√≥m t·∫Øt n√≥ l·∫°i. V√≠ d·ª•: thay v√¨ k·ªÉ chi ti·∫øt 5 ph√∫t nh√¢n v·∫≠t ƒëi t·ª´ A ƒë·∫øn B, ch·ªâ c·∫ßn n√≥i "Sau m·ªôt h·ªìi di chuy·ªÉn, anh ƒë√£ ƒë·∫øn B".
    -   **S·ª± hi sinh l√† c·∫ßn thi·∫øt:** B·∫°n ph·∫£i ch·∫•p nh·∫≠n hi sinh m·ªôt s·ªë chi ti·∫øt v√† s·ª± bay b·ªïng c·ªßa vƒÉn phong ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u ƒë·ªô d√†i. Vi·ªác n√†y l√† B·∫ÆT BU·ªòC.
-   **N·∫æU C·∫¶N M·ªû R·ªòNG:**
    -   **TH√äM M√î T·∫¢ GI√ÅC QUAN:** Th√™m chi ti·∫øt v·ªÅ h√¨nh ·∫£nh, √¢m thanh, m√πi v·ªã, c·∫£m gi√°c ƒë·ªÉ l√†m c·∫£nh v·∫≠t s·ªëng ƒë·ªông h∆°n.
    -   **K√âO D√ÄI H·ªòI THO·∫†I:** Th√™m c√°c c√¢u ƒë·ªëi ƒë√°p, bi·ªÉu c·∫£m, suy nghƒ© n·ªôi t√¢m c·ªßa nh√¢n v·∫≠t trong l√∫c h·ªôi tho·∫°i.
    -   **CHI TI·∫æT H√ìA H√ÄNH ƒê·ªòNG:** M√¥ t·∫£ h√†nh ƒë·ªông c·ªßa nh√¢n v·∫≠t m·ªôt c√°ch chi ti·∫øt h∆°n (show, don't tell).

**Y√äU C·∫¶U PH·ª§ (PRIORITY #2 - Only after satisfying Priority #1):**
-   **B√°m s√°t D√†n √ù:** Gi·ªØ l·∫°i c√°c N√öT TH·∫ÆT v√† CAO TR√ÄO ch√≠nh t·ª´ "D√†n √ù G·ªëc".
-   **Nh·∫•t qu√°n:** Duy tr√¨ s·ª± nh·∫•t qu√°n v·ªÅ t√™n nh√¢n v·∫≠t, ƒë·ªãa ƒëi·ªÉm, v√† logic c∆° b·∫£n c·ªßa c√¢u chuy·ªán.

**D√ÄN √ù G·ªêC (ƒë·ªÉ tham kh·∫£o c·ªët truy·ªán ch√≠nh):**
---
${storyOutline}
---

**TRUY·ªÜN G·ªêC C·∫¶N BI√äN T·∫¨P (b·∫±ng ${outputLanguageLabel}):**
---
${fullStory}
---

**NHI·ªÜM V·ª§ CU·ªêI C√ôNG:**
H√£y tr·∫£ v·ªÅ TO√ÄN B·ªò c√¢u chuy·ªán ƒë√£ ƒë∆∞·ª£c bi√™n t·∫≠p l·∫°i b·∫±ng ng√¥n ng·ªØ ${outputLanguageLabel}, v·ªõi ƒë·ªô d√†i **TUY·ªÜT ƒê·ªêI** ph·∫£i n·∫±m trong kho·∫£ng **${minLength} ƒë·∫øn ${maxLength} t·ª´**. Kh√¥ng th√™m l·ªùi b√¨nh, gi·ªõi thi·ªáu, hay ti√™u ƒë·ªÅ. B·∫Øt ƒë·∫ßu ngay b√¢y gi·ªù.`;

        const finalResult = await retryApiCall(() => generateText(editPrompt, undefined, false, apiSettings), 3, true);
        const finalStory = (finalResult.text ?? '').trim();
        
        // Analyze story quality and consistency (only if enabled and for longer texts)
        let storyQualityStats: any = null;
        if (enableQualityAnalysis && finalStory.length > 500) {
            // Quality analysis is part of story creation, no additional usage count
            try {
                updateTask(task.id, { progressMessage: 'B∆∞·ªõc 4/4: ƒêang ph√¢n t√≠ch ch·∫•t l∆∞·ª£ng...' });
                storyQualityStats = await analyzeStoryQuality(title, finalStory);
            } catch (error) {
                console.error('Story quality analysis failed:', error);
                // Continue without quality stats if analysis fails
            }
        }
        
        // Calculate word statistics
        const wordStats = calculateWordStats('', finalStory); // No original text for stories
        
        // Update task with final results including analysis
        updateTask(task.id, { 
            wordStats: wordStats,
            storyQualityStats: storyQualityStats
        });
        
        // Log usage statistics
        const totalApiCalls = numChunks + 1 + (enableQualityAnalysis && finalStory.length > 500 ? 1 : 0); // outline + chunks + edit + analysis
        logApiCall('quickstory', totalApiCalls);
        logTextRewritten('quickstory', 1);
        
        return finalStory;
    };

    useEffect(() => {
        const processQueue = async () => {
            const isTaskRunning = tasks.some(t => t.status === 'processing');
            if (isTaskRunning || !isProcessingQueue) return;

            const taskToProcess = tasks.find(t => t.status === 'queued');
            if (!taskToProcess) {
                updateState({ isProcessingQueue: false });
                return;
            }

            queueAbortControllerRef.current = new AbortController();
            const abortSignal = queueAbortControllerRef.current.signal;

            try {
                updateTask(taskToProcess.id, { status: 'processing', progressMessage: 'B·∫Øt ƒë·∫ßu...' });
                const finalStory = await processTask(taskToProcess, abortSignal);
                if (!abortSignal.aborted) {
                   updateTask(taskToProcess.id, { status: 'completed', generatedStory: finalStory, progressMessage: 'Ho√†n th√†nh!' });
                   
                   // Save to history
                   if (finalStory.trim()) {
                       addHistoryItem({
                           module: ActiveModule.QuickStory,
                           moduleLabel: 'T·∫°o Truy·ªán Nhanh',
                           title: `${taskToProcess.title}`,
                           content: finalStory,
                           contentType: 'text',
                           restoreContext: { ...moduleState }
                       });
                   }
                }
            } catch (e) {
                if ((e as Error).name === 'AbortError') {
                    const currentTaskState = moduleState.tasks.find(t => t.id === taskToProcess.id);
                    if (currentTaskState && currentTaskState.status !== 'canceled') {
                       updateTask(taskToProcess.id, { status: 'canceled', error: 'Qu√° tr√¨nh ƒë√£ b·ªã ng∆∞·ªùi d√πng d·ª´ng l·∫°i.', progressMessage: 'ƒê√£ d·ª´ng.' });
                    }
                } else {
                    updateTask(taskToProcess.id, { status: 'error', error: (e as Error).message, progressMessage: 'L·ªói!' });
                }
            } finally {
                queueAbortControllerRef.current = null;
            }
        };

        if (activeTab === 'quickBatch') {
            processQueue();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [tasks, isProcessingQueue, activeTab]);

    const handleAddTask = () => {
        if (!hasActiveSubscription) {
            alert('C·∫ßn n√¢ng c·∫•p g√≥i ƒëƒÉng k√Ω ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.');
            return;
        }
        if (usageStats.isBlocked) {
            alert('ƒê√£ ƒë·∫°t gi·ªõi h·∫°n s·ª≠ d·ª•ng h√¥m nay. Vui l√≤ng th·ª≠ l·∫°i v√†o ng√†y mai.');
            return;
        }
        if (!title.trim()) {
            alert('Vui l√≤ng nh·∫≠p Ti√™u ƒë·ªÅ truy·ªán.');
            return;
        }
        const newTask: QuickStoryTask = {
            id: Date.now().toString(),
            title: title.trim(),
            settings: { targetLength, writingStyle, customWritingStyle, outputLanguage, referenceViralStoryForStyle },
            status: 'pending', progressMessage: 'S·∫µn s√†ng', generatedStory: null, error: null,
        };
        setModuleState(prev => ({ ...prev, tasks: [...prev.tasks, newTask], title: '' }));
    };
    
    const handlePlayTask = (taskId: string) => {
        updateTask(taskId, { status: 'queued', progressMessage: 'ƒê√£ x·∫øp h√†ng', error: null });
        if (!isProcessingQueue) {
            updateState({ isProcessingQueue: true });
        }
    };
    
    const handleQueueAll = async () => {
        const queueableTasks = tasks.filter(t => t.status === 'pending' || t.status === 'canceled' || t.status === 'error');
        if (queueableTasks.length === 0) return;
        
        // ‚úÖ Track usage ONCE when user starts queue processing (based on number of stories)
        const storyCount = queueableTasks.length;
        const usageCheck = await checkAndTrackQuickRequest(REQUEST_ACTIONS.QUICK_STORY, storyCount);
        if (usageCheck && (usageCheck as any).allowed === false) {
            alert((usageCheck as any).message || 'ƒê√£ ƒë·∫°t gi·ªõi h·∫°n s·ª≠ d·ª•ng h√¥m nay.');
            return;
        }
        
        const newTasks = tasks.map(t => {
            if (t.status === 'pending' || t.status === 'canceled' || t.status === 'error') {
                return { ...t, status: 'queued' as const, progressMessage: 'ƒê√£ x·∫øp h√†ng', error: null };
            }
            return t;
        });
        
        updateState({ tasks: newTasks, isProcessingQueue: true });
    };
    
    const handleStopQueue = () => {
        if (queueAbortControllerRef.current) queueAbortControllerRef.current.abort();
        const newTasks = tasks.map(t => (t.status === 'processing' || t.status === 'queued') ? { ...t, status: 'canceled' as const, progressMessage: 'ƒê√£ d·ª´ng' } : t);
        updateState({ tasks: newTasks, isProcessingQueue: false });
    };
    
    const handleDeleteTask = (taskId: string) => {
        setModuleState(prev => ({ ...prev, tasks: prev.tasks.filter(t => t.id !== taskId) }));
    };
    
    const handleClearAll = () => {
        if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ c√°c nhi·ªám v·ª•?')) {
            if (isProcessingQueue) handleStopQueue();
            updateState({ tasks: [] });
        }
    };
    // ----- END: QUICK BATCH LOGIC -----


    // ----- START: SEQUEL GENERATOR LOGIC -----
    
    // Load ADN sets from localStorage on mount
    useEffect(() => {
        if (activeTab === 'sequelGenerator') {
            try {
                const savedSetsRaw = localStorage.getItem('quickStory_savedAdnSets_v1');
                if (savedSetsRaw) {
                    const savedSets = JSON.parse(savedSetsRaw);
                    if (Array.isArray(savedSets)) {
                        updateState({ savedAdnSets: savedSets });
                    }
                }
            } catch (error) {
                console.error("Failed to load ADN sets from localStorage", error);
            }
        }
    }, [activeTab]);

    // Save ADN sets to localStorage whenever they change
    useEffect(() => {
        if (activeTab === 'sequelGenerator') {
            try {
                // Check prevents saving the initial empty array on first render if nothing was in localStorage
                if (savedAdnSets.length > 0 || localStorage.getItem('quickStory_savedAdnSets_v1')) {
                    localStorage.setItem('quickStory_savedAdnSets_v1', JSON.stringify(savedAdnSets));
                }
            } catch (error) {
                console.error("Failed to save ADN sets to localStorage", error);
            }
        }
    }, [savedAdnSets, activeTab]);

    const handleSaveAdnSet = () => {
        const name = adnSetName.trim();
        const content = sequelInputStories.trim();
        if (!name || !content) {
            alert('Vui l√≤ng nh·∫≠p T√™n v√† N·ªôi dung cho b·ªô ADN.');
            return;
        }

        const existingSetIndex = savedAdnSets.findIndex(s => s.name.toLowerCase() === name.toLowerCase());
        if (existingSetIndex !== -1) {
            if (!window.confirm(`B·ªô ADN v·ªõi t√™n "${name}" ƒë√£ t·ªìn t·∫°i. B·∫°n c√≥ mu·ªën ghi ƒë√® kh√¥ng?`)) {
                return;
            }
            const newSets = [...savedAdnSets];
            newSets[existingSetIndex] = { name, content };
            updateState({ savedAdnSets: newSets, adnSetName: '' });
        } else {
            const newSet = { name, content };
            updateState({ savedAdnSets: [...savedAdnSets, newSet], adnSetName: '' });
        }
        alert(`ƒê√£ l∆∞u b·ªô ADN "${name}"!`);
    };

    const handleLoadAdnSet = () => {
        if (!selectedAdnSetName) {
            alert('Vui l√≤ng ch·ªçn m·ªôt b·ªô ADN t·ª´ danh s√°ch.');
            return;
        }
        const setToLoad = savedAdnSets.find(s => s.name === selectedAdnSetName);
        if (setToLoad) {
            updateState({ sequelInputStories: setToLoad.content });
        }
    };

    const handleDeleteAdnSet = () => {
        if (!selectedAdnSetName) {
            alert('Vui l√≤ng ch·ªçn m·ªôt b·ªô ADN t·ª´ danh s√°ch ƒë·ªÉ x√≥a.');
            return;
        }
        if (window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b·ªô ADN "${selectedAdnSetName}"?`)) {
            const newSets = savedAdnSets.filter(s => s.name !== selectedAdnSetName);
            updateState({ savedAdnSets: newSets });
            setSelectedAdnSetName('');
        }
    };


    const handleGenerateTitles = async () => {
        if (!hasActiveSubscription) {
            updateState({ sequelError: "C·∫ßn n√¢ng c·∫•p g√≥i ƒëƒÉng k√Ω ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y." });
            return;
        }
        if (usageStats.isBlocked) {
            updateState({ sequelError: "ƒê√£ ƒë·∫°t gi·ªõi h·∫°n s·ª≠ d·ª•ng h√¥m nay. Vui l√≤ng th·ª≠ l·∫°i v√†o ng√†y mai." });
            return;
        }
        if (!sequelInputStories.trim()) {
            updateState({ sequelError: "Vui l√≤ng d√°n c√°c truy·ªán m·∫´u v√†o." });
            return;
        }
        sequelAbortControllerRef.current = new AbortController();
        updateState({
            sequelIsGeneratingTitles: true,
            sequelError: null,
            sequelSuggestedTitles: [],
            sequelGeneratedStories: [],
            sequelSelectedTitles: []
        });

        const prompt = `B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch truy·ªán v√† s√°ng t·∫°o ti√™u ƒë·ªÅ. D·ª±a v√†o b·ªô s∆∞u t·∫≠p truy·ªán d∆∞·ªõi ƒë√¢y, h√£y ph√¢n t√≠ch ch·ªß ƒë·ªÅ, vƒÉn phong, v√† c√°c y·∫øu t·ªë chung. Sau ƒë√≥, t·∫°o ra ${sequelNumTitlesToSuggest} ti√™u ƒë·ªÅ m·ªõi h·∫•p d·∫´n, ph√π h·ª£p ƒë·ªÉ vi·∫øt ti·∫øp trong c√πng series.
        Ng√¥n ng·ªØ c·ªßa ti√™u ƒë·ªÅ m·ªõi ph·∫£i gi·ªëng v·ªõi ng√¥n ng·ªØ c·ªßa c√°c truy·ªán m·∫´u.
        Ch·ªâ tr·∫£ v·ªÅ danh s√°ch c√°c ti√™u ƒë·ªÅ, m·ªói ti√™u ƒë·ªÅ tr√™n m·ªôt d√≤ng, kh√¥ng c√≥ ƒë√°nh s·ªë hay k√Ω t·ª± ƒë·∫∑c bi·ªát ·ªü ƒë·∫ßu d√≤ng.
        
        TRUY·ªÜN M·∫™U:
        ---
        ${sequelInputStories.trim()}
        ---`;

        try {
            const result = await retryApiCall(() => generateText(prompt, undefined, false, apiSettings), 3, false);
            const titles = (result.text ?? '').trim().split('\n').filter(t => t.trim() !== '');

            if (titles.length === 0) {
                updateState({
                    sequelError: "AI kh√¥ng th·ªÉ t·∫°o ƒë∆∞·ª£c ti√™u ƒë·ªÅ t·ª´ n·ªôi dung ƒë√£ cho. Vui l√≤ng th·ª≠ l·∫°i v·ªõi n·ªôi dung truy·ªán m·∫´u kh√°c ho·∫∑c chi ti·∫øt h∆°n.",
                });
            } else {
                updateState({
                    sequelSuggestedTitles: titles,
                });
                
                // Log usage statistics
                logApiCall('quickstory-titles', 1);
            }
        } catch (e) {
            updateState({
                sequelError: `L·ªói khi g·ª£i √Ω ti√™u ƒë·ªÅ: ${(e as Error).message}`,
            });
        } finally {
             updateState({ sequelIsGeneratingTitles: false });
        }
    };
    
    const handleTitleSelectionChange = (title: string, isSelected: boolean) => {
        setModuleState(prev => {
            const newSelectedTitles = isSelected 
                ? [...prev.sequelSelectedTitles, title]
                : prev.sequelSelectedTitles.filter(t => t !== title);
            return { ...prev, sequelSelectedTitles: newSelectedTitles };
        });
    };

    const handleGenerateSequelStoriesBatch = async () => {
        if (sequelSelectedTitles.length === 0) {
            updateState({ sequelError: "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ti√™u ƒë·ªÅ ƒë·ªÉ vi·∫øt." });
            return;
        }
        
        // ‚úÖ Track usage ONCE when user starts the batch (based on number of stories)
        const storyCount = sequelSelectedTitles.length;
        const usageCheck = await checkAndTrackQuickRequest(REQUEST_ACTIONS.QUICK_STORY, storyCount);
        if (usageCheck && (usageCheck as any).allowed === false) {
            updateState({ sequelError: (usageCheck as any).message || 'ƒê√£ ƒë·∫°t gi·ªõi h·∫°n s·ª≠ d·ª•ng h√¥m nay.' });
            return;
        }
        
        const initialResults: SequelStoryResult[] = sequelSelectedTitles.map(title => ({
            id: Date.now().toString() + title,
            title,
            story: null,
            status: 'queued',
            error: null
        }));

        updateState({ 
            sequelIsGeneratingStories: true, 
            sequelError: null, 
            sequelProgressMessage: `ƒê√£ x·∫øp h√†ng ${initialResults.length} truy·ªán. B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...`,
            sequelGeneratedStories: initialResults
        });
    };
    
    const processSequelStory = useCallback(async (
        selectedTitle: string,
        sourceStories: string,
        settings: { targetLength: string; writingStyle: string; customWritingStyle: string; outputLanguage: string },
        abortSignal: AbortSignal,
        onProgress: (message: string) => void
    ): Promise<{ story: string; wordStats: any; storyQualityStats: any }> => {
        const { targetLength, writingStyle, customWritingStyle, outputLanguage } = settings;
        let currentStoryStyle = WRITING_STYLE_OPTIONS.find(opt => opt.value === writingStyle)?.label || writingStyle;
        if (writingStyle === 'custom') currentStoryStyle = customWritingStyle;
        const outputLanguageLabel = HOOK_LANGUAGE_OPTIONS.find(opt => opt.value === outputLanguage)?.label || outputLanguage;

        // Step 1: Write Story in Chunks
        let fullStory = '';
        const CHUNK_WORD_COUNT = 1000;
        const currentTargetLengthNum = parseInt(targetLength);
        const numChunks = Math.ceil(currentTargetLengthNum / CHUNK_WORD_COUNT);
        
        const adnViralPromptSegment = `
        **Ph√¢n T√≠ch & H·ªçc T·∫≠p ADN Viral (QUAN TR·ªåNG NH·∫§T):**
        \nD∆∞·ªõi ƒë√¢y l√† m·ªôt b·ªô s∆∞u t·∫≠p c√°c truy·ªán ƒë√£ th√†nh c√¥ng. Nhi·ªám v·ª• c·ªßa b·∫°n l√†:
        \n1.  **Ph√¢n T√≠ch S√¢u:** ƒê·ªçc v√† ph√¢n t√≠ch T·∫§T C·∫¢ c√°c truy·ªán trong b·ªô s∆∞u t·∫≠p n√†y ƒë·ªÉ tr√≠ch xu·∫•t "ADN Viral" (vƒÉn phong, nh·ªãp ƒë·ªô, c·∫•u tr√∫c, y·∫øu t·ªë c·∫£m x√∫c).
        \n2.  **√Åp D·ª•ng ADN Viral:** Khi b·∫°n vi·∫øt c√¢u chuy·ªán M·ªöI, B·∫†N B·∫ÆT BU·ªòC PH·∫¢I √°p d·ª•ng c√°c nguy√™n t·∫Øc "ADN Viral" b·∫°n v·ª´a h·ªçc ƒë∆∞·ª£c.
        \n3.  **NGHI√äM C·∫§M Sao Ch√©p N·ªôi Dung:** S√°ng t·∫°o c√¢u chuy·ªán ho√†n to√†n m·ªõi, kh√¥ng sao ch√©p nh√¢n v·∫≠t hay t√¨nh hu·ªëng c·ª• th·ªÉ t·ª´ truy·ªán tham kh·∫£o.
        \n**B·ªò S∆ØU T·∫¨P TRUY·ªÜN THAM KH·∫¢O:**
        \n---
        \n${sourceStories.trim()}
        \n---`;

        for (let i = 0; i < numChunks; i++) {
            if (abortSignal.aborted) throw new DOMException('Aborted', 'AbortError');
            onProgress(`ƒêang vi·∫øt ph·∫ßn ${i + 1}/${numChunks}...`);
            const context = fullStory.length > 2000 ? '...\n' + fullStory.slice(-2000) : fullStory;
            const writePrompt = `B·∫°n l√† m·ªôt nh√† vƒÉn AI chuy√™n vi·∫øt truy·ªán theo series.
            Nhi·ªám v·ª• c·ªßa b·∫°n l√† vi·∫øt m·ªôt c√¢u chuy·ªán m·ªõi d·ª±a tr√™n ti√™u ƒë·ªÅ ƒë∆∞·ª£c cung c·∫•p, v√† c√¢u chuy·ªán n√†y ph·∫£i c√≥ vƒÉn phong v√† "ADN viral" y h·ªát nh∆∞ c√°c truy·ªán trong b·ªô s∆∞u t·∫≠p tham kh·∫£o.
            ${adnViralPromptSegment}
            **Ti√™u ƒë·ªÅ cho truy·ªán M·ªöI c·∫ßn vi·∫øt:** "${selectedTitle}"
            **Ng√¥n ng·ªØ cho truy·ªán M·ªöI:** ${outputLanguageLabel}
            **Phong c√°ch vi·∫øt y√™u c·∫ßu (ngo√†i vi·ªác h·ªçc t·ª´ truy·ªán m·∫´u):** "${currentStoryStyle}"
            **ƒê·ªô d√†i m·ª•c ti√™u cho TO√ÄN B·ªò truy·ªán m·ªõi:** ~${currentTargetLengthNum} t·ª´.
            
            **N·ªôi dung ƒë√£ vi·∫øt (ng·ªØ c·∫£nh):**
            ${context || "ƒê√¢y l√† ph·∫ßn ƒë·∫ßu ti√™n."}
            
            **Y√™u c·∫ßu:** Vi·∫øt ph·∫ßn ti·∫øp theo c·ªßa c√¢u chuy·ªán m·ªõi, kho·∫£ng ${CHUNK_WORD_COUNT} t·ª´. Ch·ªâ vi·∫øt n·ªôi dung, kh√¥ng l·∫∑p l·∫°i, kh√¥ng ti√™u ƒë·ªÅ.`;
            
            if (i > 0) await delay(1000, abortSignal);
            const chunkResult = await retryApiCall(() => generateText(writePrompt, undefined, false, apiSettings), 3, true);
            fullStory += (fullStory ? '\n\n' : '') + ((chunkResult.text ?? '').trim() || '');
        }
        if (abortSignal.aborted) throw new DOMException('Aborted', 'AbortError');
        if (!fullStory.trim()) throw new Error("Kh√¥ng th·ªÉ vi·∫øt truy·ªán.");
        
        // Step 2: Post-Edit
        onProgress('ƒêang bi√™n t·∫≠p...');
        const minLength = Math.round(currentTargetLengthNum * 0.9);
        const maxLength = Math.round(currentTargetLengthNum * 1.1);
        const estimatedCurrentWordCount = fullStory.split(/\s+/).filter(Boolean).length;

        let actionVerb = "";
        let diffDescription = "";
        if (estimatedCurrentWordCount > maxLength) {
            actionVerb = "R√öT NG·∫ÆN";
            diffDescription = `kho·∫£ng ${estimatedCurrentWordCount - currentTargetLengthNum} t·ª´`;
        } else if (estimatedCurrentWordCount < minLength) {
            actionVerb = "M·ªû R·ªòNG";
            diffDescription = `kho·∫£ng ${currentTargetLengthNum - estimatedCurrentWordCount} t·ª´`;
        }

        const editPrompt = `B·∫°n l√† m·ªôt AI Bi√™n t·∫≠p vi√™n chuy√™n nghi·ªáp v·ªõi nhi·ªám v·ª• **TUY·ªÜT ƒê·ªêI** l√† ƒëi·ªÅu ch·ªânh ƒë·ªô d√†i c·ªßa vƒÉn b·∫£n theo y√™u c·∫ßu.

**M·ªÜNH L·ªÜNH T·ªêI TH∆Ø·ª¢NG (PRIORITY #1 - NON-NEGOTIABLE):**
Truy·ªán cu·ªëi c√πng **PH·∫¢I** c√≥ ƒë·ªô d√†i trong kho·∫£ng t·ª´ **${minLength} ƒë·∫øn ${maxLength} t·ª´**. M·ª•c ti√™u l√Ω t∆∞·ªüng l√† **${currentTargetLengthNum} t·ª´**.
-   Truy·ªán g·ªëc hi·ªán t·∫°i c√≥ kho·∫£ng **${estimatedCurrentWordCount} t·ª´**.
-   M·ªánh l·ªánh c·ªßa b·∫°n l√†: **${actionVerb} ${diffDescription}**. ƒê√¢y l√† nhi·ªám v·ª• quan tr·ªçng nh·∫•t, ph·∫£i ƒë∆∞·ª£c ∆∞u ti√™n tr√™n t·∫•t c·∫£ c√°c y·∫øu-t·ªë-kh√°c.

**CHI·∫æN L∆Ø·ª¢C BI√äN T·∫¨P B·∫ÆT BU·ªòC ƒê·ªÇ ƒê·∫†T M·ª§C TI√äU ƒê·ªò D√ÄI:**
-   **N·∫æU C·∫¶N R√öT NG·∫ÆN (BE RUTHLESS):**
    -   **C·∫ÆT B·ªé KH√îNG TH∆Ø∆†NG TI·∫æC:** Lo·∫°i b·ªè c√°c ƒëo·∫°n m√¥ t·∫£ d√†i d√≤ng, c√°c ƒëo·∫°n h·ªôi tho·∫°i ph·ª• kh√¥ng tr·ª±c ti·∫øp th√∫c ƒë·∫©y c·ªët truy·ªán, c√°c t√¨nh ti·∫øt ho·∫∑c nh√¢n v·∫≠t ph·ª• √≠t quan tr·ªçng.
    -   **C√î ƒê·ªåNG H√ìA:** Vi·∫øt l·∫°i c√°c c√¢u d√†i, ph·ª©c t·∫°p th√†nh c√°c c√¢u ng·∫Øn g·ªçn, s√∫c t√≠ch h∆°n.
    -   **T√ìM L∆Ø·ª¢C:** Thay v√¨ k·ªÉ chi ti·∫øt m·ªôt s·ª± ki·ªán, h√£y t√≥m t·∫Øt n√≥ l·∫°i.
    -   **S·ª± hi sinh l√† c·∫ßn thi·∫øt:** B·∫°n ph·∫£i ch·∫•p nh·∫≠n hi sinh m·ªôt s·ªë chi ti·∫øt v√† s·ª± bay b·ªïng c·ªßa vƒÉn phong ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u ƒë·ªô d√†i. Vi·ªác n√†y l√† B·∫ÆT BU·ªòC.
-   **N·∫æU C·∫¶N M·ªû R·ªòNG:**
    -   **TH√äM M√î T·∫¢ GI√ÅC QUAN:** Th√™m chi ti·∫øt v·ªÅ h√¨nh ·∫£nh, √¢m thanh, m√πi v·ªã, c·∫£m gi√°c.
    -   **K√âO D√ÄI H·ªòI THO·∫†I:** Th√™m c√°c c√¢u ƒë·ªëi ƒë√°p, suy nghƒ© n·ªôi t√¢m c·ªßa nh√¢n v·∫≠t.
    -   **CHI TI·∫æT H√ìA H√ÄNH ƒê·ªòNG:** M√¥ t·∫£ h√†nh ƒë·ªông c·ªßa nh√¢n v·∫≠t m·ªôt c√°ch chi ti·∫øt h∆°n.

**Y√äU C·∫¶U PH·ª§ (PRIORITY #2 - Only after satisfying Priority #1):**
-   **B√°m s√°t Ch·ªß ƒë·ªÅ & Ti√™u ƒë·ªÅ:** ƒê·∫£m b·∫£o c√¢u chuy·ªán cu·ªëi c√πng ph·∫£n √°nh ƒë√∫ng "Ti√™u ƒë·ªÅ" v√† ph√π h·ª£p v·ªõi tinh th·∫ßn chung c·ªßa "C√°c truy·ªán m·∫´u" ƒë√£ ƒë∆∞·ª£c cung c·∫•p l√†m ADN.
-   **Nh·∫•t qu√°n:** Duy tr√¨ s·ª± nh·∫•t qu√°n v·ªÅ t√™n nh√¢n v·∫≠t, ƒë·ªãa ƒëi·ªÉm, v√† logic c∆° b·∫£n c·ªßa c√¢u chuy·ªán.

**TH√îNG TIN THAM KH·∫¢O:**
- **TI√äU ƒê·ªÄ TRUY·ªÜN:** ${selectedTitle}
- **C√ÅC TRUY·ªÜN M·∫™U (ADN):** (m·ªôt ph·∫ßn)
---
${sourceStories.substring(0, 2000)}...
---

**TRUY·ªÜN G·ªêC C·∫¶N BI√äN T·∫¨P (b·∫±ng ${outputLanguageLabel}):**
---
${fullStory}
---

**NHI·ªÜM V·ª§ CU·ªêI C√ôNG:**
H√£y tr·∫£ v·ªÅ TO√ÄN B·ªò c√¢u chuy·ªán ƒë√£ ƒë∆∞·ª£c bi√™n t·∫≠p l·∫°i b·∫±ng ng√¥n ng·ªØ ${outputLanguageLabel}, v·ªõi ƒë·ªô d√†i **TUY·ªÜT ƒê·ªêI** ph·∫£i n·∫±m trong kho·∫£ng **${minLength} ƒë·∫øn ${maxLength} t·ª´**. Kh√¥ng th√™m l·ªùi b√¨nh, gi·ªõi thi·ªáu, hay ti√™u ƒë·ªÅ. B·∫Øt ƒë·∫ßu ngay b√¢y gi·ªù.`;

        const finalResult = await retryApiCall(() => generateText(editPrompt, undefined, false, apiSettings), 3, true);
        const finalStory = (finalResult.text ?? '').trim();
        
        // Analyze story quality and consistency (only if enabled and for longer texts)
        let storyQualityStats: any = null;
        if (enableQualityAnalysis && finalStory.length > 500) {
            try {
                onProgress('ƒêang ph√¢n t√≠ch ch·∫•t l∆∞·ª£ng...');
                storyQualityStats = await analyzeStoryQuality(selectedTitle, finalStory);
            } catch (error) {
                console.error('Story quality analysis failed:', error);
                // Continue without quality stats if analysis fails
            }
        }
        
        // Calculate word statistics
        const wordStats = calculateWordStats('', finalStory); // No original text for sequel stories
        
        // Log usage statistics
        const totalApiCalls = numChunks + 1 + (enableQualityAnalysis && finalStory.length > 500 ? 1 : 0); // chunks + edit + analysis
        logApiCall('quickstory-sequel', totalApiCalls);
        logTextRewritten('quickstory-sequel', 1);
        
        return {
            story: finalStory,
            wordStats: wordStats,
            storyQualityStats: storyQualityStats
        };
    }, [apiSettings]);

    useEffect(() => {
        const processSequelQueue = async () => {
            const isTaskRunning = sequelGeneratedStories.some(t => t.status === 'processing');
            if (isTaskRunning || !sequelIsGeneratingStories) return;

            const taskToProcess = sequelGeneratedStories.find(t => t.status === 'queued');
            if (!taskToProcess) {
                const completedTasks = sequelGeneratedStories.filter(t => t.status === 'completed');
                if(completedTasks.length > 0) {
                     addHistoryItem({
                        module: ActiveModule.QuickStory,
                        moduleLabel: 'T·∫°o Truy·ªán Nhanh',
                        title: `L√¥ Truy·ªán K·∫ø Ti·∫øp (${completedTasks.length} truy·ªán)`,
                        content: completedTasks.map(t => `TI√äU ƒê·ªÄ: ${t.title}\n\n${t.story}`).join('\n\n---\n\n'),
                        contentType: 'text',
                        restoreContext: { ...moduleState }
                    });
                }
                updateState({ sequelIsGeneratingStories: false, sequelProgressMessage: "Ho√†n th√†nh t·∫•t c·∫£!" });
                return;
            }

            sequelAbortControllerRef.current = new AbortController();
            const abortSignal = sequelAbortControllerRef.current.signal;
            
            const updateSequelTask = (updates: Partial<SequelStoryResult>) => {
                 setModuleState(prev => ({
                    ...prev,
                    sequelGeneratedStories: prev.sequelGeneratedStories.map(t => t.id === taskToProcess.id ? {...t, ...updates} : t)
                }));
            };

            try {
                updateSequelTask({ status: 'processing' });
                const storyResult = await processSequelStory(taskToProcess.title, sequelInputStories, { targetLength, writingStyle, customWritingStyle, outputLanguage }, abortSignal, (progressMsg) => {
                    const totalCompleted = sequelGeneratedStories.filter(t => t.status === 'completed').length;
                    const totalTasks = sequelGeneratedStories.length;
                    updateState({ sequelProgressMessage: `[${totalCompleted + 1}/${totalTasks}] "${taskToProcess.title.substring(0, 30)}...": ${progressMsg}` });
                });
                
                if (!abortSignal.aborted) {
                   updateSequelTask({ 
                       status: 'completed', 
                       story: storyResult.story,
                       wordStats: storyResult.wordStats,
                       storyQualityStats: storyResult.storyQualityStats
                   });
                }
            } catch (e) {
                 if ((e as Error).name === 'AbortError') {
                    updateSequelTask({ status: 'canceled', error: 'ƒê√£ d·ª´ng.' });
                } else {
                    updateSequelTask({ status: 'error', error: (e as Error).message });
                }
            }
        };

        if (activeTab === 'sequelGenerator') {
            processSequelQueue();
        }
    }, [sequelGeneratedStories, sequelIsGeneratingStories, activeTab, addHistoryItem, customWritingStyle, moduleState, outputLanguage, processSequelStory, sequelInputStories, targetLength, updateState, writingStyle]);
    
    const handleStopSequel = () => {
        if(sequelAbortControllerRef.current) {
            sequelAbortControllerRef.current.abort();
        }
        // Set all processing/queued tasks to canceled
        setModuleState(prev => ({
            ...prev,
            sequelGeneratedStories: prev.sequelGeneratedStories.map(t => 
                (t.status === 'processing' || t.status === 'queued') ? { ...t, status: 'canceled', error: 'ƒê√£ d·ª´ng' } : t
            ),
            sequelIsGeneratingStories: false,
            sequelProgressMessage: "ƒê√£ d·ª´ng t·∫•t c·∫£."
        }));
    };
    // ----- END: SEQUEL GENERATOR LOGIC -----
    
    const copyToClipboard = (text: string, id: string) => {
        navigator.clipboard.writeText(text).then(() => {
            setCopiedStates(prev => ({ ...prev, [id]: true }));
            setTimeout(() => {
                setCopiedStates(prev => ({ ...prev, [id]: false }));
            }, 2000);
        });
    };
    
    const getStatusChip = (status: QuickStoryTask['status']) => {
        switch(status) {
            case 'pending': return 'bg-gray-200 text-gray-700';
            case 'queued': return 'bg-yellow-200 text-yellow-800';
            case 'processing': return 'bg-blue-200 text-blue-700 animate-pulse';
            case 'completed': return 'bg-green-200 text-green-700';
            case 'error': return 'bg-red-200 text-red-700';
            case 'canceled': return 'bg-orange-200 text-orange-700';
        }
    };
    
    const statusText: Record<QuickStoryTask['status'], string> = {
        pending: 'S·∫µn s√†ng',
        queued: 'ƒê√£ x·∫øp h√†ng',
        processing: 'ƒêang x·ª≠ l√Ω',
        completed: 'Ho√†n th√†nh',
        error: 'L·ªói',
        canceled: 'ƒê√£ d·ª´ng',
    };

    const isAnyTaskQueuedOrProcessing = tasks.some(t => t.status === 'queued' || t.status === 'processing');
    
    const TabButton: React.FC<{ tabId: QuickStoryActiveTab; label: string; icon: React.ElementType }> = ({ tabId, label, icon: Icon }) => (
        <button
            onClick={() => updateState({ activeTab: tabId })}
            className={`flex items-center space-x-2 px-4 py-3 font-medium rounded-t-lg text-base transition-colors ${
                activeTab === tabId ? 'bg-indigo-600 text-white shadow-md' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
            }`}
            disabled={!hasActiveSubscription || isProcessingQueue || sequelIsGeneratingTitles || sequelIsGeneratingStories || usageStats.isBlocked}
        >
            <Icon size={18} />
            <span>{label}</span>
        </button>
    );

    return (
        <ModuleContainer title="‚ö°Ô∏è T·∫°o Truy·ªán Nhanh">
            <InfoBox>
                <p><strong>T·∫°o H√†ng Lo·∫°t Nhanh:</strong> Th√™m h√†ng lo·∫°t truy·ªán v√†o danh s√°ch, sau ƒë√≥ nh·∫•n "Play" cho t·ª´ng truy·ªán ho·∫∑c "X·∫øp h√†ng T·∫•t c·∫£" ƒë·ªÉ AI t·ª± ƒë·ªông x·ª≠ l√Ω tu·∫ßn t·ª±.</p>
                <p className="mt-2"><strong>S√°ng t·∫°o Truy·ªán K·∫ø Ti·∫øp:</strong> Cung c·∫•p c√°c truy·ªán m·∫´u c√πng ch·ªß ƒë·ªÅ ƒë·ªÉ AI h·ªçc "ADN viral", sau ƒë√≥ g·ª£i √Ω ti√™u ƒë·ªÅ m·ªõi v√† vi·∫øt m·ªôt c√¢u chuy·ªán ti·∫øp theo v·ªõi vƒÉn phong ƒë·ªìng nh·∫•t.</p>
            </InfoBox>
            
            {/* Daily Usage Counter */}
            <div className={`p-4 rounded-lg border ${usageStats.isBlocked ? 'bg-red-50 border-red-200' : 'bg-green-50 border-green-200'}`}>
                <div className="flex items-center justify-between">
                    <div className="flex items-center">
                        <span className={`text-2xl mr-2 ${usageStats.isBlocked ? 'text-red-600' : 'text-green-600'}`}>
                            {usageStats.isBlocked ? 'üö´' : 'üìä'}
                        </span>
                        <div>
                            <h3 className={`font-semibold ${usageStats.isBlocked ? 'text-red-800' : 'text-green-800'}`}>
                                S·ª≠ d·ª•ng h√¥m nay: {usageStats.current}/{usageStats.limit}
                            </h3>
                            <p className={`text-sm ${usageStats.isBlocked ? 'text-red-600' : 'text-green-600'}`}>
                                {usageStats.isBlocked 
                                    ? `ƒê√£ ƒë·∫°t gi·ªõi h·∫°n! Reset v√†o 00:00 ng√†y mai.`
                                    : `C√≤n l·∫°i ${usageStats.remaining} requests (${usageStats.percentage}% ƒë√£ d√πng)`
                                }
                            </p>
                        </div>
                    </div>
                    <div className={`text-2xl font-bold ${usageStats.isBlocked ? 'text-red-600' : 'text-green-600'}`}>
                        {usageStats.percentage}%
                    </div>
                </div>
                {/* Progress Bar */}
                <div className="mt-3 w-full bg-gray-200 rounded-full h-2">
                    <div 
                        className={`h-2 rounded-full transition-all duration-300 ${
                            usageStats.percentage >= 90 ? 'bg-red-500' : 
                            usageStats.percentage >= 70 ? 'bg-yellow-500' : 'bg-green-500'
                        }`}
                        style={{ width: `${Math.min(100, usageStats.percentage)}%` }}
                    ></div>
                </div>
            </div>
            
            {!hasActiveSubscription && <UpgradePrompt />}

            <div className="my-6 flex flex-wrap gap-1 border-b-2 border-gray-300">
                <TabButton tabId="quickBatch" label="T·∫°o H√†ng Lo·∫°t Nhanh" icon={Zap} />
                <TabButton tabId="sequelGenerator" label="S√°ng t·∫°o Truy·ªán K·∫ø Ti·∫øp" icon={BookCopy} />
            </div>

            {/* Common Settings for both tabs */}
             <div className="space-y-6 mt-6 p-6 border-2 border-gray-200 rounded-lg bg-gray-50 shadow">
                 <h3 className="text-xl font-semibold text-gray-800">C√†i ƒë·∫∑t Chung</h3>
                 <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <div>
                        <label className="block text-sm font-medium text-gray-700">M·ª•c ti√™u s·ªë t·ª´: <span className="font-semibold text-indigo-600">{parseInt(targetLength).toLocaleString()} t·ª´</span></label>
                        <input type="range" min={STORY_LENGTH_OPTIONS[0].value} max={STORY_LENGTH_OPTIONS[STORY_LENGTH_OPTIONS.length - 1].value} step="500" value={targetLength} onChange={(e) => updateState({ targetLength: e.target.value })} className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-indigo-600" disabled={!hasActiveSubscription || isAnyTaskQueuedOrProcessing || sequelIsGeneratingTitles || sequelIsGeneratingStories || usageStats.isBlocked}/>
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Phong c√°ch vi·∫øt:</label>
                        <select value={writingStyle} onChange={(e) => updateState({ writingStyle: e.target.value })} className="w-full p-3 border-2 border-gray-300 rounded-lg" disabled={!hasActiveSubscription || isAnyTaskQueuedOrProcessing || sequelIsGeneratingTitles || sequelIsGeneratingStories || usageStats.isBlocked}>
                            {WRITING_STYLE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                        </select>
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Ng√¥n ng·ªØ truy·ªán:</label>
                        <select value={outputLanguage} onChange={(e) => updateState({ outputLanguage: e.target.value })} className="w-full p-3 border-2 border-gray-300 rounded-lg" disabled={!hasActiveSubscription || isAnyTaskQueuedOrProcessing || sequelIsGeneratingTitles || sequelIsGeneratingStories || usageStats.isBlocked}>
                            {HOOK_LANGUAGE_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                        </select>
                    </div>
                 </div>
                 {writingStyle === 'custom' && (
                     <input type="text" value={customWritingStyle} onChange={(e) => updateState({ customWritingStyle: e.target.value })} className="w-full p-3 border-2 border-gray-300 rounded-lg" placeholder="Nh·∫≠p phong c√°ch vi·∫øt t√πy ch·ªânh..." disabled={!hasActiveSubscription || isAnyTaskQueuedOrProcessing || sequelIsGeneratingTitles || sequelIsGeneratingStories || usageStats.isBlocked}/>
                )}
                
                {/* Quality Analysis Toggle */}
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <label className="flex items-center cursor-pointer">
                        <input
                            type="checkbox"
                            checked={enableQualityAnalysis}
                            onChange={(e) => setEnableQualityAnalysis(e.target.checked)}
                            className="mr-3 h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                            disabled={!hasActiveSubscription || isAnyTaskQueuedOrProcessing || sequelIsGeneratingTitles || sequelIsGeneratingStories || usageStats.isBlocked}
                        />
                        <div>
                            <span className="text-sm font-medium text-gray-700">
                                üéØ Ph√¢n t√≠ch ch·∫•t l∆∞·ª£ng TO√ÄN B·ªò c√¢u chuy·ªán (t·ªën th√™m API)
                            </span>
                            <p className="text-xs text-gray-500 mt-1">
                                B·∫≠t ƒë·ªÉ ph√¢n t√≠ch ƒë·ªô nh·∫•t qu√°n v√† ho√†n thi·ªán c·ªßa TO√ÄN B·ªò truy·ªán. S·∫Ω m·∫•t th√™m th·ªùi gian v√† API calls nh∆∞ng cho k·∫øt qu·∫£ ch√≠nh x√°c nh·∫•t.
                            </p>
                            <p className="text-xs text-orange-600 mt-1 font-medium">
                                ‚ö†Ô∏è Ph√¢n t√≠ch to√†n b·ªô vƒÉn b·∫£n ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªô ch√≠nh x√°c cao nh·∫•t trong ƒë√°nh gi√° nh·∫•t qu√°n & ho√†n thi·ªán.
                            </p>
                        </div>
                    </label>
                </div>
            </div>

            {activeTab === 'quickBatch' && (
            <div className="animate-fadeIn">
                {/* Input Form Section */}
                <div className="space-y-6 mt-6 p-6 border-2 border-gray-200 rounded-lg bg-white shadow">
                    <h3 className="text-xl font-semibold text-gray-800">Th√™m Nhi·ªám v·ª• M·ªõi</h3>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Ti√™u ƒë·ªÅ Truy·ªán:</label>
                        <textarea value={title} onChange={(e) => updateState({ title: e.target.value })} placeholder="Nh·∫≠p ti√™u ƒë·ªÅ cho truy·ªán m·ªõi..." rows={2} className="w-full p-3 border-2 border-gray-300 rounded-lg" disabled={!hasActiveSubscription || usageStats.isBlocked}/>
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">VƒÉn Phong Viral Tham Kh·∫£o (T√πy ch·ªçn):</label>
                        <textarea value={referenceViralStoryForStyle} onChange={(e) => updateState({ referenceViralStoryForStyle: e.target.value })} rows={4} className="w-full p-3 border-2 border-gray-300 rounded-lg" placeholder="D√°n 1 ho·∫∑c nhi·ªÅu k·ªãch b·∫£n/truy·ªán viral v√†o ƒë√¢y..." disabled={!hasActiveSubscription || usageStats.isBlocked}></textarea>
                    </div>
                    <button onClick={handleAddTask} disabled={!hasActiveSubscription || !title.trim() || usageStats.isBlocked} className="w-full flex items-center justify-center bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-blue-700 disabled:bg-gray-400">
                        {!hasActiveSubscription ? (
                            <>üîí C·∫ßn N√¢ng c·∫•p G√≥i</>
                        ) : usageStats.isBlocked ? (
                            <>üö´ ƒê√£ ƒë·∫°t gi·ªõi h·∫°n</>
                        ) : (
                            <><PlusCircle className="mr-2"/> Th√™m v√†o Danh s√°ch</>
                        )}
                    </button>
                </div>

                {/* Queue & Results Section */}
                <div className="mt-8">
                    <div className="flex justify-between items-center mb-4">
                        <h3 className="text-xl font-semibold text-gray-800">H√†ng ch·ªù & K·∫øt qu·∫£ ({tasks.length} nhi·ªám v·ª•)</h3>
                        <div className="flex gap-2">
                            {!isProcessingQueue ? (
                                <button onClick={handleQueueAll} disabled={!hasActiveSubscription || tasks.filter(t => t.status === 'pending' || t.status === 'canceled' || t.status === 'error').length === 0 || usageStats.isBlocked} className="px-4 py-2 text-sm bg-green-600 text-white rounded-lg shadow hover:bg-green-700 disabled:opacity-50 flex items-center">
                                    {!hasActiveSubscription ? (
                                        <>üîí C·∫ßn N√¢ng c·∫•p</>
                                    ) : usageStats.isBlocked ? (
                                        <>üö´ ƒê√£ ƒë·∫°t gi·ªõi h·∫°n</>
                                    ) : (
                                        <><ChevronsRight className="mr-1" size={16}/> X·∫øp h√†ng T·∫•t c·∫£</>
                                    )}
                                </button>
                            ) : (
                                <button onClick={handleStopQueue} className="px-4 py-2 text-sm bg-red-600 text-white rounded-lg shadow hover:bg-red-700 flex items-center"><Square className="mr-1" size={16}/> D·ª´ng</button>
                            )}
                            <button onClick={handleClearAll} disabled={tasks.length === 0 || isProcessingQueue} className="px-4 py-2 text-sm bg-gray-600 text-white rounded-lg shadow hover:bg-gray-700 disabled:opacity-50 flex items-center"><Trash2 className="mr-1" size={16}/> X√≥a t·∫•t c·∫£</button>
                        </div>
                    </div>
                    <div className="space-y-4">
                        {tasks.length === 0 ? (
                            <p className="text-center text-gray-500 py-8 bg-gray-50 rounded-lg">H√†ng ch·ªù ƒëang tr·ªëng. Th√™m m·ªôt nhi·ªám v·ª• ƒë·ªÉ b·∫Øt ƒë·∫ßu.</p>
                        ) : (
                            tasks.map((task, index) => (
                                <details key={task.id} className="bg-white p-4 rounded-lg shadow-md border-l-4 border-gray-300" open={task.status === 'processing' || task.status === 'error'}>
                                    <summary className="font-semibold text-gray-800 cursor-pointer flex justify-between items-center">
                                        <div className="flex items-center gap-3 flex-wrap">
                                            {(task.status === 'pending' || task.status === 'canceled' || task.status === 'error') && (
                                                <button 
                                                    onClick={(e) => { e.preventDefault(); handlePlayTask(task.id); }} 
                                                    disabled={!hasActiveSubscription || usageStats.isBlocked}
                                                    className={`p-2 rounded-full ${
                                                        !hasActiveSubscription || usageStats.isBlocked 
                                                            ? 'bg-gray-100 text-gray-400 cursor-not-allowed' 
                                                            : 'bg-green-100 text-green-600 hover:bg-green-200'
                                                    }`} 
                                                    title={!hasActiveSubscription ? 'C·∫ßn n√¢ng c·∫•p g√≥i ƒëƒÉng k√Ω' : usageStats.isBlocked ? 'ƒê√£ ƒë·∫°t gi·ªõi h·∫°n h√¥m nay' : 'B·∫Øt ƒë·∫ßu x·ª≠ l√Ω nhi·ªám v·ª• n√†y'}
                                                >
                                                    <Play size={16}/>
                                                </button>
                                            )}
                                            <span className={`px-2 py-1 text-xs font-semibold rounded-full ${getStatusChip(task.status)}`}>{statusText[task.status]}</span>
                                            <span className="font-bold">#{index + 1}:</span>
                                            <p className="ml-2 truncate max-w-xs md:max-w-md" title={task.title}>{task.title}</p>
                                        </div>
                                        <button onClick={(e) => { e.preventDefault(); handleDeleteTask(task.id); }} disabled={task.status === 'processing' || task.status === 'queued'} className="p-2 text-gray-400 hover:text-red-600 disabled:text-gray-300"><Trash size={16}/></button>
                                    </summary>
                                    <div className="mt-3 pt-3 border-t">
                                        {task.progressMessage && <p className="text-sm text-gray-600 mb-2"><strong>Th√¥ng b√°o:</strong> {task.progressMessage}</p>}
                                        {task.error && <ErrorAlert message={task.error}/>}
                                        {task.generatedStory && (
                                            <div>
                                                <div className="flex justify-between items-center mb-1">
                                                    <h5 className="text-sm font-semibold text-gray-600">Truy·ªán Ho√†n Ch·ªânh:</h5>
                                                    <button onClick={() => copyToClipboard(task.generatedStory!, task.id)} className="flex items-center text-xs px-2 py-1 bg-gray-200 hover:bg-gray-300 rounded-md">
                                                    {copiedStates[task.id] ? <ClipboardCheck size={14} className="mr-1 text-green-600"/> : <Clipboard size={14} className="mr-1"/>}
                                                    {copiedStates[task.id] ? 'ƒê√£ sao ch√©p' : 'Sao ch√©p'}
                                                    </button>
                                                </div>
                                                <textarea readOnly value={task.generatedStory} rows={8} className="w-full p-2 text-xs border rounded bg-gray-50 whitespace-pre-wrap"/>
                                                
                                                {/* Word Statistics */}
                                                {task.wordStats && (
                                                    <div className="mt-3 p-3 bg-blue-50 rounded-lg border border-blue-200">
                                                        <h4 className="text-xs font-semibold text-blue-800 mb-2">üìä Th·ªëng k√™ t·ª´:</h4>
                                                        <div className="grid grid-cols-2 gap-2 text-xs">
                                                            <div className="flex justify-between">
                                                                <span className="text-gray-600">S·ªë t·ª´:</span>
                                                                <span className="font-semibold text-green-600">{task.wordStats.generatedWords.toLocaleString()}</span>
                                                            </div>
                                                            <div className="flex justify-between">
                                                                <span className="text-gray-600">Ch·∫•t l∆∞·ª£ng:</span>
                                                                <span className="font-semibold text-purple-600">{task.storyQualityStats?.overallQualityScore || 'N/A'}%</span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                )}

                                                {/* Story Quality Analysis */}
                                                {task.storyQualityStats && (
                                                    <div className="mt-3 p-3 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-200">
                                                        <h4 className="text-sm font-semibold text-purple-800 mb-3 flex items-center">
                                                            üéØ ƒê√°nh Gi√° Ch·∫•t L∆∞·ª£ng C√¢u Chuy·ªán
                                                        </h4>
                                                        
                                                        {/* Quality Scores */}
                                                        <div className="grid grid-cols-3 gap-3 mb-3">
                                                            <div className="text-center">
                                                                <div className="text-lg font-bold text-purple-700">{task.storyQualityStats.consistencyScore}%</div>
                                                                <div className="text-xs text-gray-600">T√≠nh nh·∫•t qu√°n</div>
                                                            </div>
                                                            <div className="text-center">
                                                                <div className="text-lg font-bold text-pink-700">{task.storyQualityStats.completenessScore}%</div>
                                                                <div className="text-xs text-gray-600">ƒê·ªô ho√†n thi·ªán</div>
                                                            </div>
                                                            <div className="text-center">
                                                                <div className="text-lg font-bold text-indigo-700">{task.storyQualityStats.overallQualityScore}%</div>
                                                                <div className="text-xs text-gray-600">Ch·∫•t l∆∞·ª£ng t·ªïng</div>
                                                            </div>
                                                        </div>

                                                        {/* Quality Progress Bars */}
                                                        <div className="space-y-2 mb-3">
                                                            <div>
                                                                <div className="flex justify-between text-xs mb-1">
                                                                    <span>Nh·∫•t qu√°n</span>
                                                                    <span>{task.storyQualityStats.consistencyScore}%</span>
                                                                </div>
                                                                <div className="w-full bg-gray-200 rounded-full h-2">
                                                                    <div 
                                                                        className="bg-purple-600 h-2 rounded-full transition-all duration-300" 
                                                                        style={{ width: `${task.storyQualityStats.consistencyScore}%` }}
                                                                    ></div>
                                                                </div>
                                                            </div>
                                                            <div>
                                                                <div className="flex justify-between text-xs mb-1">
                                                                    <span>Ho√†n thi·ªán</span>
                                                                    <span>{task.storyQualityStats.completenessScore}%</span>
                                                                </div>
                                                                <div className="w-full bg-gray-200 rounded-full h-2">
                                                                    <div 
                                                                        className="bg-pink-600 h-2 rounded-full transition-all duration-300" 
                                                                        style={{ width: `${task.storyQualityStats.completenessScore}%` }}
                                                                    ></div>
                                                                </div>
                                                            </div>
                                                            <div>
                                                                <div className="flex justify-between text-xs mb-1">
                                                                    <span>T·ªïng th·ªÉ</span>
                                                                    <span>{task.storyQualityStats.overallQualityScore}%</span>
                                                                </div>
                                                                <div className="w-full bg-gray-200 rounded-full h-2">
                                                                    <div 
                                                                        className="bg-indigo-600 h-2 rounded-full transition-all duration-300" 
                                                                        style={{ width: `${task.storyQualityStats.overallQualityScore}%` }}
                                                                    ></div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        {/* Detailed Analysis */}
                                                        <details className="text-xs">
                                                            <summary className="cursor-pointer text-purple-700 font-medium hover:text-purple-800 mb-2">
                                                                üìã Xem ph√¢n t√≠ch chi ti·∫øt
                                                            </summary>
                                                            <div className="space-y-2 text-xs bg-white p-2 rounded border">
                                                                <div>
                                                                    <span className="font-semibold text-gray-700">üë• Nh√¢n v·∫≠t:</span>
                                                                    <p className="text-gray-600 ml-2">{task.storyQualityStats.analysis.characterConsistency}</p>
                                                                </div>
                                                                <div>
                                                                    <span className="font-semibold text-gray-700">üìö C·ªët truy·ªán:</span>
                                                                    <p className="text-gray-600 ml-2">{task.storyQualityStats.analysis.plotCoherence}</p>
                                                                </div>
                                                                <div>
                                                                    <span className="font-semibold text-gray-700">‚è∞ Th·ªùi gian:</span>
                                                                    <p className="text-gray-600 ml-2">{task.storyQualityStats.analysis.timelineConsistency}</p>
                                                                </div>
                                                                <div>
                                                                    <span className="font-semibold text-gray-700">üèûÔ∏è B·ªëi c·∫£nh:</span>
                                                                    <p className="text-gray-600 ml-2">{task.storyQualityStats.analysis.settingConsistency}</p>
                                                                </div>
                                                                <div>
                                                                    <span className="font-semibold text-gray-700">üéØ T·ªïng quan:</span>
                                                                    <p className="text-gray-600 ml-2">{task.storyQualityStats.analysis.overallAssessment}</p>
                                                                </div>
                                                            </div>
                                                        </details>
                                                    </div>
                                                )}
                                            </div>
                                        )}
                                        <details className="text-xs mt-2">
                                            <summary className="cursor-pointer text-gray-500">Xem l·∫°i c√†i ƒë·∫∑t cho nhi·ªám v·ª• n√†y</summary>
                                            <div className="p-2 mt-1 bg-gray-100 rounded-md text-gray-600">
                                                <p><strong>S·ªë t·ª´:</strong> ~{parseInt(task.settings.targetLength).toLocaleString()}</p>
                                                <p><strong>Phong c√°ch:</strong> {task.settings.writingStyle === 'custom' ? task.settings.customWritingStyle : WRITING_STYLE_OPTIONS.find(o => o.value === task.settings.writingStyle)?.label}</p>
                                                <p><strong>Ng√¥n ng·ªØ:</strong> {HOOK_LANGUAGE_OPTIONS.find(o => o.value === task.settings.outputLanguage)?.label}</p>
                                                <p><strong>VƒÉn phong tham kh·∫£o:</strong> {task.settings.referenceViralStoryForStyle ? 'C√≥' : 'Kh√¥ng'}</p>
                                            </div>
                                        </details>
                                    </div>
                                </details>
                            ))
                        )}
                    </div>
                </div>
            </div>
            )}

            {activeTab === 'sequelGenerator' && (
                <div className="animate-fadeIn space-y-6">
                     <div className="p-6 border-2 border-gray-200 rounded-lg bg-white shadow">
                        <h3 className="text-xl font-semibold text-gray-800">B∆∞·ªõc 1: Cung c·∫•p Truy·ªán M·∫´u (ADN)</h3>
                        <label htmlFor="sequel-input" className="block text-sm font-medium text-gray-700 my-2">D√°n 5-10 truy·ªán m·∫´u v√†o ƒë√¢y, ph√¢n t√°ch m·ªói truy·ªán b·∫±ng d·∫•u `---` tr√™n m·ªôt d√≤ng ri√™ng:</label>
                        <textarea id="sequel-input" value={sequelInputStories} onChange={e => updateState({ sequelInputStories: e.target.value })} rows={10} className="w-full p-3 border-2 border-gray-300 rounded-lg" placeholder="Ti√™u ƒë·ªÅ: Truy·ªán m·∫´u 1&#10;N·ªôi dung truy·ªán 1...&#10;---&#10;Ti√™u ƒë·ªÅ: Truy·ªán m·∫´u 2&#10;N·ªôi dung truy·ªán 2..." disabled={!hasActiveSubscription || sequelIsGeneratingTitles || sequelIsGeneratingStories || usageStats.isBlocked}/>
                        
                        <div className="mt-4 pt-4 border-t border-dashed border-gray-400">
                            <h4 className="text-md font-semibold text-gray-700 mb-2">Qu·∫£n l√Ω B·ªô ADN (L∆∞u & T·∫£i Nhanh)</h4>
                            <div className="flex flex-col sm:flex-row gap-2 mb-3">
                                <input 
                                    type="text" 
                                    value={adnSetName} 
                                    onChange={e => updateState({ adnSetName: e.target.value })}
                                    placeholder="ƒê·∫∑t t√™n cho b·ªô ADN n√†y..."
                                    className="flex-grow p-2 border border-gray-300 rounded-md"
                                />
                                <button onClick={handleSaveAdnSet} disabled={!hasActiveSubscription || !adnSetName.trim() || !sequelInputStories.trim() || usageStats.isBlocked} className="flex items-center justify-center px-4 py-2 bg-teal-600 text-white font-semibold rounded-md hover:bg-teal-700 disabled:bg-gray-400">
                                    <Save size={16} className="mr-2"/> L∆∞u B·ªô ADN
                                </button>
                            </div>
                            <div className="flex flex-col sm:flex-row gap-2">
                                <select onChange={e => setSelectedAdnSetName(e.target.value)} value={selectedAdnSetName} className="flex-grow p-2 border border-gray-300 rounded-md bg-white">
                                    <option value="">-- Ch·ªçn b·ªô ADN ƒë√£ l∆∞u --</option>
                                    {savedAdnSets.map(s => <option key={s.name} value={s.name}>{s.name}</option>)}
                                </select>
                                <button onClick={handleLoadAdnSet} disabled={!hasActiveSubscription || !selectedAdnSetName || usageStats.isBlocked} className="flex items-center justify-center px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:bg-gray-400">
                                    <Download size={16} className="mr-2"/> T·∫£i
                                </button>
                                <button onClick={handleDeleteAdnSet} disabled={!hasActiveSubscription || !selectedAdnSetName || usageStats.isBlocked} className="flex items-center justify-center px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 disabled:bg-gray-400">
                                    <Trash size={16} className="mr-2"/> X√≥a
                                </button>
                            </div>
                        </div>

                        <div className="flex items-end gap-4 mt-4 pt-4 border-t border-dashed border-gray-400">
                            <div className="flex-1">
                                <label htmlFor="sequel-num-titles" className="block text-sm font-medium text-gray-700 mb-1">S·ªë l∆∞·ª£ng Ti√™u ƒë·ªÅ G·ª£i √Ω (1-20):</label>
                                <input type="number" id="sequel-num-titles" value={sequelNumTitlesToSuggest} onChange={e => updateState({ sequelNumTitlesToSuggest: parseInt(e.target.value)})} min="1" max="20" className="w-full p-3 border-2 border-gray-300 rounded-lg" disabled={!hasActiveSubscription || sequelIsGeneratingTitles || sequelIsGeneratingStories || usageStats.isBlocked}/>
                            </div>
                            <div className="flex-1">
                                <button onClick={handleGenerateTitles} disabled={!hasActiveSubscription || sequelIsGeneratingTitles || sequelIsGeneratingStories || !sequelInputStories.trim() || usageStats.isBlocked} className="w-full bg-blue-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-blue-700 disabled:bg-gray-400 flex items-center justify-center h-[52px]">
                                    {!hasActiveSubscription ? (
                                        <>üîí C·∫ßn N√¢ng c·∫•p G√≥i</>
                                    ) : usageStats.isBlocked ? (
                                        <>üö´ ƒê√£ ƒë·∫°t gi·ªõi h·∫°n</>
                                    ) : sequelIsGeneratingTitles ? (
                                        <>
                                            <Loader2 className="animate-spin mr-2"/>
                                            <span>ƒêang Ph√¢n T√≠ch...</span>
                                        </>
                                    ) : (
                                        'Ph√¢n t√≠ch & G·ª£i √Ω Ti√™u ƒë·ªÅ M·ªõi'
                                    )}
                                </button>
                            </div>
                        </div>
                    </div>

                     {(!sequelIsGeneratingTitles && (sequelError || sequelSuggestedTitles.length > 0 || sequelGeneratedStories.length > 0)) && (
                        <div className="p-6 border-2 border-gray-200 rounded-lg bg-white shadow">
                            <h3 className="text-xl font-semibold text-gray-800">B∆∞·ªõc 2: Ch·ªçn Ti√™u ƒë·ªÅ v√† Vi·∫øt Truy·ªán</h3>
                            {sequelError && !sequelIsGeneratingTitles && !sequelIsGeneratingStories && <ErrorAlert message={sequelError} />}
                            
                            {sequelSuggestedTitles.length > 0 && (
                                <div className="space-y-2">
                                    <p className="text-sm font-medium text-gray-700 mb-2">Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu ti√™u ƒë·ªÅ sau:</p>
                                    <div className="max-h-60 overflow-y-auto pr-2 space-y-2">
                                        {sequelSuggestedTitles.map((title, index) => (
                                            <label key={index} className="flex items-center p-3 bg-gray-50 rounded-md border has-[:checked]:bg-indigo-50 has-[:checked]:border-indigo-400 cursor-pointer">
                                                <input type="checkbox" name="sequel-title" value={title} checked={sequelSelectedTitles.includes(title)} onChange={e => handleTitleSelectionChange(title, e.target.checked)} className="form-checkbox text-indigo-600 h-5 w-5"/>
                                                <span className="ml-3 text-sm font-medium text-gray-800">{title}</span>
                                            </label>
                                        ))}
                                    </div>
                                    <div className="pt-4 flex gap-4">
                                        <button onClick={handleGenerateSequelStoriesBatch} disabled={!hasActiveSubscription || sequelIsGeneratingStories || sequelSelectedTitles.length === 0 || usageStats.isBlocked} className="flex-1 bg-green-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-green-700 disabled:bg-gray-400">
                                            {!hasActiveSubscription ? (
                                                <>üîí C·∫ßn N√¢ng c·∫•p G√≥i</>
                                            ) : usageStats.isBlocked ? (
                                                <>üö´ ƒê√£ ƒë·∫°t gi·ªõi h·∫°n</>
                                            ) : (
                                                <>Vi·∫øt {sequelSelectedTitles.length > 0 ? sequelSelectedTitles.length : ''} Truy·ªán ƒê√£ ch·ªçn</>
                                            )}
                                        </button>
                                        {sequelIsGeneratingStories && <button onClick={handleStopSequel} className="px-4 py-2 bg-red-600 text-white rounded-lg shadow hover:bg-red-700"><Square size={16}/></button>}
                                    </div>
                                </div>
                            )}
                        </div>
                    )}
                    {sequelGeneratedStories.length > 0 && (
                        <div className="p-6 border-2 border-gray-200 rounded-lg bg-white shadow mt-6">
                            <h3 className="text-xl font-semibold text-gray-800 mb-4">K·∫øt qu·∫£ Vi·∫øt Truy·ªán K·∫ø Ti·∫øp</h3>
                            {sequelIsGeneratingStories && sequelProgressMessage && (
                                <div className="mb-4">
                                    <LoadingSpinner message={sequelProgressMessage} />
                                </div>
                            )}
                             {sequelError && !sequelIsGeneratingStories && <ErrorAlert message={sequelError} />}
                            <div className="space-y-4">
                                {sequelGeneratedStories.map(result => (
                                    <details key={result.id} className="bg-gray-50 p-4 rounded-lg border-l-4 border-gray-300" open={result.status === 'processing' || result.status === 'error'}>
                                        <summary className="font-semibold text-gray-800 cursor-pointer flex justify-between items-center">
                                            <span className="truncate" title={result.title}>{result.title}</span>
                                            <span className={`px-2 py-1 text-xs font-semibold rounded-full ${getStatusChip(result.status)}`}>{statusText[result.status]}</span>
                                        </summary>
                                        <div className="mt-3 pt-3 border-t">
                                            {result.error && <ErrorAlert message={result.error} />}
                                            {result.story && (
                                                <div>
                                                    <div className="flex justify-end mb-1">
                                                        <button onClick={() => copyToClipboard(result.story!, result.id)} className="flex items-center text-xs px-2 py-1 bg-gray-200 hover:bg-gray-300 rounded-md">
                                                            {copiedStates[result.id] ? <ClipboardCheck size={14} className="mr-1 text-green-600"/> : <Clipboard size={14} className="mr-1"/>}
                                                            {copiedStates[result.id] ? 'ƒê√£ sao ch√©p' : 'Sao ch√©p'}
                                                        </button>
                                                    </div>
                                                    <textarea readOnly value={result.story} rows={10} className="w-full p-2 text-sm border rounded bg-white whitespace-pre-wrap"/>
                                                    
                                                    {/* Word Statistics */}
                                                    {result.wordStats && (
                                                        <div className="mt-3 p-2 bg-blue-50 rounded-lg border border-blue-200">
                                                            <h4 className="text-xs font-semibold text-blue-800 mb-2">üìä Th·ªëng k√™ t·ª´:</h4>
                                                            <div className="grid grid-cols-2 gap-2 text-xs">
                                                                <div className="flex justify-between">
                                                                    <span className="text-gray-600">S·ªë t·ª´:</span>
                                                                    <span className="font-semibold text-green-600">{result.wordStats.generatedWords.toLocaleString()}</span>
                                                                </div>
                                                                <div className="flex justify-between">
                                                                    <span className="text-gray-600">Ch·∫•t l∆∞·ª£ng:</span>
                                                                    <span className="font-semibold text-purple-600">{result.storyQualityStats?.overallQualityScore || 'N/A'}%</span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    )}

                                                    {/* Story Quality Analysis */}
                                                    {result.storyQualityStats && (
                                                        <div className="mt-3 p-3 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-200">
                                                            <h4 className="text-sm font-semibold text-purple-800 mb-3 flex items-center">
                                                                üéØ ƒê√°nh Gi√° Ch·∫•t L∆∞·ª£ng C√¢u Chuy·ªán
                                                            </h4>
                                                            
                                                            {/* Quality Scores */}
                                                            <div className="grid grid-cols-3 gap-3 mb-3">
                                                                <div className="text-center">
                                                                    <div className="text-lg font-bold text-purple-700">{result.storyQualityStats.consistencyScore}%</div>
                                                                    <div className="text-xs text-gray-600">T√≠nh nh·∫•t qu√°n</div>
                                                                </div>
                                                                <div className="text-center">
                                                                    <div className="text-lg font-bold text-pink-700">{result.storyQualityStats.completenessScore}%</div>
                                                                    <div className="text-xs text-gray-600">ƒê·ªô ho√†n thi·ªán</div>
                                                                </div>
                                                                <div className="text-center">
                                                                    <div className="text-lg font-bold text-indigo-700">{result.storyQualityStats.overallQualityScore}%</div>
                                                                    <div className="text-xs text-gray-600">Ch·∫•t l∆∞·ª£ng t·ªïng</div>
                                                                </div>
                                                            </div>

                                                            {/* Quality Progress Bars */}
                                                            <div className="space-y-2 mb-3">
                                                                <div>
                                                                    <div className="flex justify-between text-xs mb-1">
                                                                        <span>Nh·∫•t qu√°n</span>
                                                                        <span>{result.storyQualityStats.consistencyScore}%</span>
                                                                    </div>
                                                                    <div className="w-full bg-gray-200 rounded-full h-2">
                                                                        <div 
                                                                            className="bg-purple-600 h-2 rounded-full transition-all duration-300" 
                                                                            style={{ width: `${result.storyQualityStats.consistencyScore}%` }}
                                                                        ></div>
                                                                    </div>
                                                                </div>
                                                                <div>
                                                                    <div className="flex justify-between text-xs mb-1">
                                                                        <span>Ho√†n thi·ªán</span>
                                                                        <span>{result.storyQualityStats.completenessScore}%</span>
                                                                    </div>
                                                                    <div className="w-full bg-gray-200 rounded-full h-2">
                                                                        <div 
                                                                            className="bg-pink-600 h-2 rounded-full transition-all duration-300" 
                                                                            style={{ width: `${result.storyQualityStats.completenessScore}%` }}
                                                                        ></div>
                                                                    </div>
                                                                </div>
                                                                <div>
                                                                    <div className="flex justify-between text-xs mb-1">
                                                                        <span>T·ªïng th·ªÉ</span>
                                                                        <span>{result.storyQualityStats.overallQualityScore}%</span>
                                                                    </div>
                                                                    <div className="w-full bg-gray-200 rounded-full h-2">
                                                                        <div 
                                                                            className="bg-indigo-600 h-2 rounded-full transition-all duration-300" 
                                                                            style={{ width: `${result.storyQualityStats.overallQualityScore}%` }}
                                                                        ></div>
                                                                    </div>
                                                                </div>
                                                            </div>

                                                            {/* Detailed Analysis */}
                                                            <details className="text-xs">
                                                                <summary className="cursor-pointer text-purple-700 font-medium hover:text-purple-800 mb-2">
                                                                    üìã Xem ph√¢n t√≠ch chi ti·∫øt
                                                                </summary>
                                                                <div className="space-y-2 text-xs bg-white p-2 rounded border">
                                                                    <div>
                                                                        <span className="font-semibold text-gray-700">üë• Nh√¢n v·∫≠t:</span>
                                                                        <p className="text-gray-600 ml-2">{result.storyQualityStats.analysis.characterConsistency}</p>
                                                                    </div>
                                                                    <div>
                                                                        <span className="font-semibold text-gray-700">üìö C·ªët truy·ªán:</span>
                                                                        <p className="text-gray-600 ml-2">{result.storyQualityStats.analysis.plotCoherence}</p>
                                                                    </div>
                                                                    <div>
                                                                        <span className="font-semibold text-gray-700">‚è∞ Th·ªùi gian:</span>
                                                                        <p className="text-gray-600 ml-2">{result.storyQualityStats.analysis.timelineConsistency}</p>
                                                                    </div>
                                                                    <div>
                                                                        <span className="font-semibold text-gray-700">üèûÔ∏è B·ªëi c·∫£nh:</span>
                                                                        <p className="text-gray-600 ml-2">{result.storyQualityStats.analysis.settingConsistency}</p>
                                                                    </div>
                                                                    <div>
                                                                        <span className="font-semibold text-gray-700">üéØ T·ªïng quan:</span>
                                                                        <p className="text-gray-600 ml-2">{result.storyQualityStats.analysis.overallAssessment}</p>
                                                                    </div>
                                                                </div>
                                                            </details>
                                                        </div>
                                                    )}
                                                </div>
                                            )}
                                        </div>
                                    </details>
                                ))}
                            </div>
                        </div>
                    )}
                </div>
            )}
        </ModuleContainer>
    );
};

export default QuickStoryModule;