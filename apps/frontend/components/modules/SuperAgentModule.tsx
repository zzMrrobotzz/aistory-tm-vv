import React, { useState, useCallback } from 'react';
import { ApiSettings, SuperAgentModuleState, UserProfile } from '../../types';
import { ASPECT_RATIO_OPTIONS, SUPER_AGENT_WORD_COUNT_OPTIONS } from '../../constants';
import ModuleContainer from '../ModuleContainer';
import LoadingSpinner from '../LoadingSpinner';
import ErrorAlert from '../ErrorAlert';
import InfoBox from '../InfoBox';
import { generateImage } from '../../services/geminiService';
import { generateText } from '@/services/textGenerationService';
import { delay } from '../../utils'; // Added delay import

interface SuperAgentModuleProps {
  apiSettings: ApiSettings;
  moduleState: SuperAgentModuleState;
  setModuleState: React.Dispatch<React.SetStateAction<SuperAgentModuleState>>;
  currentUser: UserProfile | null; // Add currentUser prop
}

const SuperAgentModule: React.FC<SuperAgentModuleProps> = ({ 
  apiSettings, moduleState, setModuleState, currentUser 
}) => {
  const {
    sourceText, wordCount, imageCount, aspectRatio,
    generatedStory, generatedImages, error
  } = moduleState;

  const updateState = (updates: Partial<SuperAgentModuleState>) => {
    setModuleState(prev => ({ ...prev, ...updates }));
  };
  
  const [isLoadingProcess, setIsLoadingProcess] = useState(false); 
  const [loadingMessage, setLoadingMessage] = useState<string | null>(null);
  const [currentAbortController, setCurrentAbortController] = useState<AbortController | null>(null);


  const geminiApiKeyForService = apiSettings.provider === 'gemini' ? apiSettings.apiKey : undefined;

  const handleCancel = () => {
    if (currentAbortController) {
      currentAbortController.abort();
      setLoadingMessage("ƒêang h·ªßy...");
      // setIsLoadingProcess will be set to false in the finally block of handleSubmit
    }
  };

  const handleSubmit = async () => {
    if (!sourceText) {
      updateState({ error: 'Vui l√≤ng nh·∫≠p Ti√™u ƒê·ªÅ ho·∫∑c D√†n √ù.' });
      return;
    }
    
    const abortController = new AbortController();
    setCurrentAbortController(abortController);
    
    updateState({ error: null, generatedStory: '', generatedImages: [] });
    setIsLoadingProcess(true);
    setLoadingMessage(null); // Clear previous messages

    try {
      setLoadingMessage('B∆∞·ªõc 1/3: ƒêang vi·∫øt truy·ªán...');
      let storyPrompt: string;
      const isLikelyOutline = sourceText.length > 150 || sourceText.includes('\n') || sourceText.toLowerCase().includes("d√†n √Ω:") || sourceText.toLowerCase().includes("outline:");

      if (isLikelyOutline) {
        storyPrompt = `D·ª±a v√†o d√†n √Ω sau, h√£y vi·∫øt m·ªôt c√¢u chuy·ªán ho√†n ch·ªânh kho·∫£ng ${wordCount} t·ª´. Ch·ªâ tr·∫£ v·ªÅ c√¢u chuy·ªán ho√†n ch·ªânh:\n\n${sourceText}`;
      } else {
        setLoadingMessage('B∆∞·ªõc 1/3 (P1): ƒêang t·∫°o d√†n √Ω t·ª´ ti√™u ƒë·ªÅ...');
        const outlineResult = await generateText(`H√£y vi·∫øt m·ªôt d√†n √Ω chi ti·∫øt cho truy·ªán ng·∫Øn v·ªõi ti√™u ƒë·ªÅ: "${sourceText}".`, undefined, undefined, apiSettings);
        if (abortController.signal.aborted) throw new DOMException('Aborted', 'AbortError');
        await delay(1000, abortController.signal); 
        setLoadingMessage('B∆∞·ªõc 1/3 (P2): ƒêang vi·∫øt truy·ªán t·ª´ d√†n √Ω...');
        storyPrompt = `D·ª±a v√†o d√†n √Ω sau, h√£y vi·∫øt m·ªôt c√¢u chuy·ªán ho√†n ch·ªânh kho·∫£ng ${wordCount} t·ª´. Ch·ªâ tr·∫£ v·ªÅ c√¢u chuy·ªán ho√†n ch·ªânh:\n\n${outlineResult.text}`;
      }
      
      const storyResult = await generateText(storyPrompt, undefined, undefined, apiSettings);
      if (abortController.signal.aborted) throw new DOMException('Aborted', 'AbortError');
      updateState({ generatedStory: storyResult.text });
      await delay(1000, abortController.signal); 

      setLoadingMessage(`B∆∞·ªõc 2/3: ƒêang t·∫°o ${imageCount} prompt ·∫£nh...`);
      
      const imagePromptsQuery = `D·ª±a tr√™n c√¢u chuy·ªán sau, h√£y t·∫°o ra ${imageCount} prompt ·∫£nh b·∫±ng ti·∫øng Anh ƒë·ªÉ minh h·ªça cho c√°c c·∫£nh quan tr·ªçng. M·ªói prompt ph·∫£i chi ti·∫øt, s·ªëng ƒë·ªông, th√≠ch h·ª£p cho model text-to-image Imagen3. M·ªói prompt tr√™n m·ªôt d√≤ng ri√™ng bi·ªát, kh√¥ng c√≥ ƒë·∫ßu m·ª•c "Prompt X:".\n\nTRUY·ªÜN (ch·ªâ d√πng ph·∫ßn ƒë·∫ßu ƒë·ªÉ tham kh·∫£o n·∫øu truy·ªán qu√° d√†i):\n${storyResult.text.substring(0, 3000)}`;
      const imagePromptsResult = await generateText(imagePromptsQuery, undefined, undefined, apiSettings);
      if (abortController.signal.aborted) throw new DOMException('Aborted', 'AbortError');
      const prompts = imagePromptsResult.text.split('\n').filter(p => p.trim() !== '').slice(0, imageCount);
      await delay(1000, abortController.signal); 

      const images: string[] = [];
      for (let i = 0; i < prompts.length; i++) {
        if (abortController.signal.aborted) throw new DOMException('Aborted', 'AbortError');
        setLoadingMessage(`B∆∞·ªõc 3/3: ƒêang t·∫°o ·∫£nh ${i + 1}/${prompts.length}...`);
        if (i > 0) await delay(1500, abortController.signal); 
        const imageB64 = await generateImage(prompts[i], aspectRatio, geminiApiKeyForService);
        if (abortController.signal.aborted) throw new DOMException('Aborted', 'AbortError');
        images.push(imageB64);
        updateState({ generatedImages: [...images] }); 
      }
      
      setLoadingMessage("Ho√†n th√†nh!");
    } catch (e: any) {
      if (e.name === 'AbortError') {
        updateState({ error: `Quy tr√¨nh ƒë√£ b·ªã h·ªßy.`, generatedStory: generatedStory || '', generatedImages: generatedImages || [] }); // Keep partial results
        setLoadingMessage("ƒê√£ h·ªßy.");
      } else {
        updateState({ error: `Quy tr√¨nh ƒë√£ d·ª´ng do l·ªói: ${e.message}` });
        setLoadingMessage("L·ªói.");
      }
    } finally {
      setIsLoadingProcess(false);
      setCurrentAbortController(null);
      // Keep "ƒê√£ h·ªßy" or "L·ªói" message for a bit before clearing
      if(loadingMessage === "ƒê√£ h·ªßy." || loadingMessage === "L·ªói." || loadingMessage === "Ho√†n th√†nh!") {
        setTimeout(() => {
            if (!isLoadingProcess) setLoadingMessage(null); // Only clear if not immediately restarted
        }, 3000);
      }
    }
  };
  

  return (
    <ModuleContainer title="üöÄ Si√™u Tr·ª£ L√Ω AI: T·ª´ √ù T∆∞·ªüng ƒê·∫øn S·∫£n Ph·∫©m">
      <InfoBox>
        <strong>üí° H∆∞·ªõng d·∫´n:</strong> Nh·∫≠p √Ω t∆∞·ªüng, thi·∫øt l·∫≠p c√°c t√πy ch·ªçn v√† ƒë·ªÉ Si√™u Tr·ª£ L√Ω t·ª± ƒë·ªông th·ª±c hi·ªán to√†n b·ªô quy tr√¨nh. D√†n √Ω t·ª´ "X√¢y D·ª±ng Truy·ªán" s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông ƒëi·ªÅn v√†o ƒë√¢y.
      </InfoBox>

      <div className="space-y-6">
        <div>
          <label htmlFor="superAgentSource" className="block text-sm font-medium text-gray-700 mb-1">1. Nh·∫≠p Ti√™u ƒê·ªÅ ho·∫∑c D√†n √ù:</label>
          <textarea
            id="superAgentSource"
            value={sourceText}
            onChange={(e) => updateState({ sourceText: e.target.value })}
            placeholder="D√°n d√†n √Ω t·ª´ module 'X√¢y D·ª±ng Truy·ªán' ho·∫∑c nh·∫≠p √Ω t∆∞·ªüng c·ªßa b·∫°n..."
            rows={4}
            className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
            disabled={isLoadingProcess}
          />
        </div>

        <div className="grid md:grid-cols-3 gap-6">
          <div>
            <label htmlFor="superAgentWordCount" className="block text-sm font-medium text-gray-700 mb-1">2. M·ª•c ti√™u s·ªë t·ª´:</label>
            <select id="superAgentWordCount" value={wordCount} onChange={(e) => updateState({ wordCount: e.target.value })} className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm" disabled={isLoadingProcess}>
              {SUPER_AGENT_WORD_COUNT_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
            </select>
          </div>
          <div>
            <label htmlFor="superAgentImageCount" className="block text-sm font-medium text-gray-700 mb-1">3. S·ªë l∆∞·ª£ng ·∫£nh (1-5):</label>
            <input type="number" id="superAgentImageCount" value={imageCount} onChange={(e) => updateState({ imageCount: Math.max(1, Math.min(5, parseInt(e.target.value)))})} min="1" max="5" className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm" disabled={isLoadingProcess}/>
          </div>
          <div>
            <label htmlFor="superAgentAspectRatio" className="block text-sm font-medium text-gray-700 mb-1">4. T·ª∑ l·ªá ·∫£nh:</label>
            <select id="superAgentAspectRatio" value={aspectRatio} onChange={(e) => updateState({ aspectRatio: e.target.value })} className="w-full p-3 border-2 border-gray-300 rounded-lg shadow-sm" disabled={isLoadingProcess}>
              {ASPECT_RATIO_OPTIONS.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
            </select>
          </div>
        </div>
        
        {isLoadingProcess ? (
          <div className="flex space-x-3">
            <button
              disabled 
              className="w-2/3 bg-gray-400 text-white font-semibold py-3 px-6 rounded-lg shadow-md cursor-not-allowed"
            >
              {loadingMessage || "ƒêang x·ª≠ l√Ω..."}
            </button>
            <button
              onClick={handleCancel}
              className="w-1/3 bg-red-500 hover:bg-red-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md"
              aria-label="H·ªßy t√°c v·ª• hi·ªán t·∫°i"
            >
              H·ªßy ‚èπÔ∏è
            </button>
          </div>
        ) : (
          <button
            onClick={handleSubmit}
            disabled={ !sourceText}
            className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:opacity-90 transition-opacity"
          >
            üöÄ B·∫Øt ƒê·∫ßu Quy Tr√¨nh
          </button>
        )}


        {(!isLoadingProcess && loadingMessage && (loadingMessage.includes("Ho√†n th√†nh") || loadingMessage.includes("ƒê√£ h·ªßy") || loadingMessage.includes("L·ªói"))) && 
            <p className={`text-center font-medium my-2 ${loadingMessage.includes("L·ªói") ? 'text-red-600' : (loadingMessage.includes("ƒê√£ h·ªßy") ? 'text-yellow-600' : 'text-green-600')}`}>
                {loadingMessage}
            </p>
        }
        {error && <ErrorAlert message={error} />}

        {(generatedStory || generatedImages.length > 0) && (
          <div className="mt-8 space-y-6">
            {generatedStory && (
              <div className="p-4 border rounded-lg bg-gray-50">
                <h3 className="text-lg font-semibold mb-2 text-gray-700">‚úçÔ∏è Truy·ªán Ho√†n Ch·ªânh:</h3>
                <textarea
                  value={generatedStory}
                  readOnly
                  rows={15}
                  className="w-full p-3 border-2 border-gray-200 rounded-md bg-white whitespace-pre-wrap leading-relaxed"
                />
              </div>
            )}
            {generatedImages.length > 0 && (
              <div className="p-4 border rounded-lg bg-gray-50">
                <h3 className="text-lg font-semibold mb-2 text-gray-700">üñºÔ∏è ·∫¢nh Minh H·ªça ƒê√£ T·∫°o:</h3>
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                  {generatedImages.map((imgB64, index) => (
                    <img key={index} src={`data:image/png;base64,${imgB64}`} alt={`Generated Illustration ${index + 1}`} className="w-full h-auto rounded-md shadow-sm object-contain"/>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </ModuleContainer>
  );
};

export default SuperAgentModule;
