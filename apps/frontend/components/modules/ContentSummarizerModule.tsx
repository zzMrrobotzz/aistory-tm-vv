import React, { useState, useRef, useEffect } from 'react';
import { ApiSettings, AiAssistantModuleState, AiAssistantInputType, GroundingChunk, ChatMessage } from '../../types';
import { generateText } from '../../services/textGenerationService';
import ModuleContainer from '../ModuleContainer';
import LoadingSpinner from '../LoadingSpinner';
import ErrorAlert from '../ErrorAlert';
import InfoBox from '../InfoBox';
import { Youtube, FileText, Bot, User, Send, ChevronDown, ChevronUp, Copy, CopyCheck } from 'lucide-react';

interface ContentSummarizerModuleProps {
    apiSettings: ApiSettings;
    moduleState: AiAssistantModuleState;
    setModuleState: React.Dispatch<React.SetStateAction<AiAssistantModuleState>>;
}

const ContentSummarizerModule: React.FC<ContentSummarizerModuleProps> = ({
    apiSettings, moduleState, setModuleState
}) => {
    const {
        activeInputTab, youtubeLinkInput, textInput,
        processedSourceText, summary, chatHistory, groundingSources,
        currentQuestion, isLoading, isChatting, error
    } = moduleState;
    
    const chatContainerRef = useRef<HTMLDivElement>(null);
    const [isSummaryExpanded, setIsSummaryExpanded] = useState(true);
    const [isCopied, setIsCopied] = useState(false);

    useEffect(() => {
        // Scroll to the bottom of the chat container when new messages are added
        if (chatContainerRef.current) {
            chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
        }
    }, [chatHistory]);

    const updateState = (updates: Partial<AiAssistantModuleState>) => {
        setModuleState(prev => ({ ...prev, ...updates }));
    };

    const handleAnalyze = async () => {
        let validationError = '';
        let sourceContent = '';
        let useSearch = false;

        if (activeInputTab === 'youtubeLink') {
            if (!youtubeLinkInput.trim()) {
                validationError = 'Vui l√≤ng nh·∫≠p link video YouTube.';
            } else {
                try {
                    new URL(youtubeLinkInput);
                    sourceContent = youtubeLinkInput.trim();
                    useSearch = true;
                } catch (_) {
                    validationError = 'Link YouTube kh√¥ng h·ª£p l·ªá.';
                }
            }
        } else { // 'text'
            if (!textInput.trim()) {
                validationError = 'Vui l√≤ng nh·∫≠p vƒÉn b·∫£n.';
            } else {
                sourceContent = textInput.trim();
            }
        }

        if (validationError) {
            updateState({ error: validationError });
            return;
        }

        updateState({ 
            isLoading: true, 
            error: null, 
            summary: null, 
            chatHistory: [], 
            processedSourceText: null, 
            groundingSources: [] 
        });

        // This marker is a trick to ask the AI for two things in one call.
        const fullTextMarker = "---FULL_TEXT_BELOW---";
        const prompt = useSearch
            ? `Ph√¢n t√≠ch n·ªôi dung video YouTube t·∫°i URL sau ƒë·ªÉ hi·ªÉu ch·ªß ƒë·ªÅ v√† c√°c ƒëi·ªÉm ch√≠nh. Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr√≠ch xu·∫•t n·ªôi dung ho·∫∑c b·∫£n ghi c·ªßa video.

URL YouTube: ${sourceContent}

D·ª±a tr√™n th√¥ng tin b·∫°n t√¨m ƒë∆∞·ª£c t·ª´ vi·ªác t√¨m ki·∫øm v·ªÅ video n√†y, th·ª±c hi·ªán hai b∆∞·ªõc sau:
1. Vi·∫øt m·ªôt b·∫£n t√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ video b·∫±ng ti·∫øng Vi·ªát.
2. Sau b·∫£n t√≥m t·∫Øt, th√™m d·∫•u hi·ªáu "${fullTextMarker}" tr√™n m·ªôt d√≤ng m·ªõi.
3. Sau d·∫•u hi·ªáu, cung c·∫•p to√†n b·ªô n·ªôi dung chi ti·∫øt ho·∫∑c b·∫£n ghi c·ªßa video m√† b·∫°n c√≥ th·ªÉ t√¨m ƒë∆∞·ª£c, c≈©ng b·∫±ng ti·∫øng Vi·ªát.

N·∫øu b·∫°n kh√¥ng th·ªÉ t√¨m th·∫•y b·∫£n ghi, h√£y n√≥i "Kh√¥ng t√¨m th·∫•y b·∫£n ghi chi ti·∫øt (transcript) cho video n√†y." v√† c·ªë g·∫Øng t·∫°o m·ªôt b·∫£n t√≥m t·∫Øt chi ti·∫øt v·ªÅ n·ªôi dung video d·ª±a tr√™n ti√™u ƒë·ªÅ, m√¥ t·∫£ v√† b·∫•t k·ª≥ th√¥ng tin n√†o kh√°c c√≥ s·∫µn t·ª´ t√¨m ki·∫øm c·ªßa b·∫°n, v√† ƒë·∫∑t b·∫£n t√≥m t·∫Øt chi ti·∫øt ƒë√≥ sau d·∫•u hi·ªáu thay v√¨ b·∫£n ghi.`
            : `ƒê·∫ßu ti√™n, h√£y cung c·∫•p m·ªôt b·∫£n t√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ vƒÉn b·∫£n sau. Sau ƒë√≥, sau b·∫£n t√≥m t·∫Øt, th√™m d·∫•u hi·ªáu "${fullTextMarker}" tr√™n m·ªôt d√≤ng m·ªõi, theo sau l√† to√†n b·ªô vƒÉn b·∫£n g·ªëc.\n\nVƒÉn b·∫£n:\n---\n${sourceContent}`;

        try {
            const result = await generateText(prompt, undefined, useSearch, apiSettings);
            let resultSummary = '';
            let fullText = '';
            
            if (result.text.includes(fullTextMarker)) {
                const parts = result.text.split(fullTextMarker);
                resultSummary = parts[0].trim();
                fullText = parts[1].trim();
            } else {
                // Fallback if the marker is not found
                resultSummary = result.text.trim();
                fullText = sourceContent; // Use the original input as the context
            }
            
            updateState({
                summary: resultSummary,
                processedSourceText: fullText,
                groundingSources: result.groundingChunks || [],
                chatHistory: [{
                    role: 'model',
                    message: "Ph√¢n t√≠ch ho√†n t·∫•t! T√¥i ƒë√£ ƒë·ªçc v√† t√≥m t·∫Øt n·ªôi dung. B·∫°n c√≥ c√¢u h·ªèi n√†o kh√¥ng?"
                }]
            });

        } catch (e) {
            updateState({ error: `ƒê√£ x·∫£y ra l·ªói khi ph√¢n t√≠ch: ${(e as Error).message}` });
        } finally {
            updateState({ isLoading: false });
        }
    };

    const handleSendMessage = async () => {
        if (!currentQuestion.trim() || isChatting || !processedSourceText) return;

        const newHistory: ChatMessage[] = [...chatHistory, { role: 'user', message: currentQuestion.trim() }];
        updateState({ isChatting: true, chatHistory: newHistory, currentQuestion: '' });

        try {
            const systemInstruction = `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI h·ªØu √≠ch. B·∫°n ƒë√£ ƒë∆∞·ª£c cung c·∫•p m·ªôt vƒÉn b·∫£n ƒë·ªÉ ph√¢n t√≠ch. Vai tr√≤ ch√≠nh c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a **ho√†n to√†n** tr√™n ng·ªØ c·∫£nh vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p. N·∫øu ng∆∞·ªùi d√πng h·ªèi c√¢u h·ªèi kh√¥ng th·ªÉ tr·∫£ l·ªùi t·ª´ vƒÉn b·∫£n, h√£y n√≥i r·∫±ng b·∫°n kh√¥ng c√≥ th√¥ng tin ƒë√≥ trong t√†i li·ªáu ƒë∆∞·ª£c cung c·∫•p. N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ tr·ª£ gi√∫p chung v·ªÅ c√¥ng c·ª•, b·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi ƒëi·ªÅu ƒë√≥. C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng c√≥ th·ªÉ b·∫±ng ti·∫øng Vi·ªát, h√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.`;
            
            const prompt = `NG·ªÆ C·∫¢NH:\n---\n${processedSourceText}\n---\n\nD·ª±a tr√™n ng·ªØ c·∫£nh tr√™n, tr·∫£ l·ªùi c√¢u h·ªèi sau c·ªßa ng∆∞·ªùi d√πng:\n\nC√ÇU H·ªéI: ${currentQuestion.trim()}`;

            const result = await generateText(prompt, systemInstruction, false, apiSettings);
            
            updateState({
                chatHistory: [...newHistory, { role: 'model', message: result.text.trim() }]
            });

        } catch (e) {
            const errorMessage = `L·ªói khi tr·∫£ l·ªùi: ${(e as Error).message}`;
            updateState({ 
                chatHistory: [...newHistory, { role: 'model', message: `Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. (${errorMessage})` }]
            });
        } finally {
            updateState({ isChatting: false });
        }
    };

    const handleCopy = (text: string | null) => {
        if (!text) return;
        navigator.clipboard.writeText(text);
        setIsCopied(true);
        setTimeout(() => setIsCopied(false), 2000);
    };

    const TabButton: React.FC<{ tabId: AiAssistantInputType; label: string; icon: React.ElementType }> = ({ tabId, label, icon: Icon }) => (
        <button
            onClick={() => updateState({ activeInputTab: tabId })}
            className={`flex-1 flex justify-center items-center space-x-2 px-4 py-3 font-medium text-base transition-colors rounded-t-lg ${
                activeInputTab === tabId ? 'bg-white text-indigo-600 border-b-2 border-indigo-600' : 'bg-gray-100 text-gray-500 hover:bg-gray-200'
            }`}
            disabled={isLoading}
        >
            <Icon size={18} />
            <span>{label}</span>
        </button>
    );

    return (
        <ModuleContainer title="ü§ñ T√≥m T·∫Øt N·ªôi Dung & Tr·ª£ L√Ω AI">
            <InfoBox>
                <p><strong>Tr·ª£ l√Ω AI t√≥m t·∫Øt n·ªôi dung th√¥ng minh.</strong> Cung c·∫•p link YouTube ho·∫∑c vƒÉn b·∫£n ƒë·ªÉ AI t√≥m t·∫Øt v√† b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán ƒë·ªÉ h·ªèi-ƒë√°p chi ti·∫øt v·ªÅ n·ªôi dung.</p>
            </InfoBox>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mt-6">
                {/* Left Panel: Input */}
                <div className="bg-white p-6 rounded-xl shadow-lg border border-gray-200 flex flex-col">
                    <h3 className="text-xl font-semibold text-gray-800 mb-4">1. Cung c·∫•p N·ªôi dung</h3>
                    <div className="flex border-b">
                        <TabButton tabId="youtubeLink" label="Link YouTube" icon={Youtube} />
                        <TabButton tabId="text" label="VƒÉn b·∫£n" icon={FileText} />
                    </div>
                    <div className="py-4 flex-grow">
                        {activeInputTab === 'youtubeLink' && (
                            <input 
                                type="url" 
                                value={youtubeLinkInput} 
                                onChange={e => updateState({ youtubeLinkInput: e.target.value })} 
                                className="w-full p-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent" 
                                placeholder="D√°n link video YouTube v√†o ƒë√¢y..." 
                                disabled={isLoading} 
                            />
                        )}
                        {activeInputTab === 'text' && (
                            <textarea 
                                value={textInput} 
                                onChange={e => updateState({ textInput: e.target.value })} 
                                rows={10} 
                                className="w-full p-3 border-2 border-gray-300 rounded-lg resize-y focus:ring-2 focus:ring-indigo-500 focus:border-transparent" 
                                placeholder="D√°n n·ªôi dung truy·ªán, k·ªãch b·∫£n, b√†i b√°o ƒë·ªÉ t√≥m t·∫Øt v√† ph√¢n t√≠ch..." 
                                disabled={isLoading}>
                            </textarea>
                        )}
                    </div>
                     <button 
                        onClick={handleAnalyze} 
                        disabled={isLoading} 
                        className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:from-indigo-700 hover:to-purple-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed mt-auto">
                        {isLoading ? 'ƒêang Ph√¢n T√≠ch...' : 'Ph√¢n T√≠ch & B·∫Øt ƒê·∫ßu Chat'}
                    </button>
                </div>

                {/* Right Panel: Output */}
                <div className="bg-white p-6 rounded-xl shadow-lg border border-gray-200 flex flex-col min-h-[500px]">
                    <h3 className="text-xl font-semibold text-gray-800 mb-4">2. T√≥m t·∫Øt & Tr√≤ chuy·ªán</h3>
                    {isLoading ? (
                        <div className="flex-grow flex items-center justify-center">
                            <LoadingSpinner message="AI ƒëang ƒë·ªçc v√† ph√¢n t√≠ch n·ªôi dung..." />
                        </div>
                    ) : error ? (
                        <ErrorAlert message={error} />
                    ) : !summary ? (
                        <div className="flex-grow flex items-center justify-center text-center text-gray-500">
                           <p>K·∫øt qu·∫£ t√≥m t·∫Øt v√† c·ª≠a s·ªï chat s·∫Ω hi·ªán ·ªü ƒë√¢y sau khi b·∫°n ph√¢n t√≠ch n·ªôi dung.</p>
                        </div>
                    ) : (
                        <div className="flex flex-col flex-grow h-full overflow-hidden">
                             <details open={isSummaryExpanded} onToggle={(e) => setIsSummaryExpanded((e.target as HTMLDetailsElement).open)} className="mb-4">
                                <summary className="font-semibold text-gray-700 cursor-pointer flex justify-between items-center p-2 rounded-md hover:bg-gray-100 transition-colors">
                                    <span>üìã B·∫£n T√≥m T·∫Øt N·ªôi Dung</span>
                                    {isSummaryExpanded ? <ChevronUp size={20} /> : <ChevronDown size={20} />}
                                </summary>
                                <div className="mt-2 p-3 bg-gray-50 border rounded-md text-sm text-gray-800 relative">
                                    <p className="whitespace-pre-wrap leading-relaxed">{summary}</p>
                                    <button 
                                        onClick={() => handleCopy(summary)} 
                                        className="absolute top-2 right-2 p-1.5 text-gray-500 hover:bg-gray-200 rounded-full transition-colors" 
                                        title="Sao ch√©p t√≥m t·∫Øt">
                                        {isCopied ? <CopyCheck size={14} className="text-green-600"/> : <Copy size={14} />}
                                    </button>
                                </div>
                            </details>
                            
                            {/* Chat Window */}
                            <div ref={chatContainerRef} className="flex-grow overflow-y-auto pr-2 space-y-4 mb-4 border-t pt-4">
                                {chatHistory.map((chat, index) => (
                                    <div key={index} className={`flex items-start gap-3 ${chat.role === 'user' ? 'justify-end' : ''}`}>
                                        {chat.role === 'model' && <div className="flex-shrink-0 h-8 w-8 rounded-full bg-indigo-500 text-white flex items-center justify-center"><Bot size={16}/></div>}
                                        <div className={`max-w-[80%] p-3 rounded-xl ${chat.role === 'user' ? 'bg-blue-500 text-white rounded-br-none' : 'bg-gray-200 text-gray-800 rounded-bl-none'}`}>
                                            <p className="text-sm whitespace-pre-wrap leading-relaxed">{chat.message}</p>
                                        </div>
                                         {chat.role === 'user' && <div className="flex-shrink-0 h-8 w-8 rounded-full bg-gray-500 text-white flex items-center justify-center"><User size={16}/></div>}
                                    </div>
                                ))}
                                {isChatting && (
                                     <div className="flex items-start gap-3">
                                        <div className="flex-shrink-0 h-8 w-8 rounded-full bg-indigo-500 text-white flex items-center justify-center"><Bot size={16}/></div>
                                        <div className="max-w-[80%] p-3 rounded-xl bg-gray-200 text-gray-800 rounded-bl-none">
                                            <p className="text-sm animate-pulse">AI ƒëang so·∫°n c√¢u tr·∫£ l·ªùi...</p>
                                        </div>
                                    </div>
                                )}
                            </div>
                            
                            {/* Chat Input */}
                            <div className="mt-auto flex items-center space-x-2">
                                <input 
                                    type="text"
                                    value={currentQuestion}
                                    onChange={e => updateState({ currentQuestion: e.target.value })}
                                    onKeyDown={e => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); handleSendMessage(); } }}
                                    className="flex-grow p-3 border-2 border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                                    placeholder="ƒê·∫∑t c√¢u h·ªèi v·ªÅ n·ªôi dung..."
                                    disabled={isChatting}
                                />
                                <button 
                                    onClick={handleSendMessage} 
                                    disabled={isChatting || !currentQuestion.trim()} 
                                    className="p-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors">
                                    <Send size={18} />
                                </button>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </ModuleContainer>
    );
};

export default ContentSummarizerModule;