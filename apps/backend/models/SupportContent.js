const mongoose = require('mongoose');

const SupportContentSchema = new mongoose.Schema({
  // General Settings
  supportTitle: {
    type: String,
    default: 'üìû Trung T√¢m H·ªó Tr·ª£ & Li√™n H·ªá'
  },
  supportDescription: {
    type: String,
    default: 'N·∫øu b·∫°n c·∫ßn h·ªó tr·ª£, gi·∫£i ƒë√°p th·∫Øc m·∫Øc ho·∫∑c c√≥ b·∫•t k·ª≥ y√™u c·∫ßu n√†o li√™n quan ƒë·∫øn Tool Vi·∫øt Truy·ªán AI Story - ALL IN ONE'
  },
  
  // Contact Information
  contactInfo: {
    primaryContact: {
      type: String,
      default: 'Zalo'
    },
    contactValue: {
      type: String,
      default: '0339933882'
    },
    contactName: {
      type: String,
      default: 'ƒê·ª©c ƒê·∫°i MMO'
    },
    secondaryContacts: [{
      type: {
        type: String, // 'email', 'telegram', 'facebook', 'phone'
        required: true
      },
      label: {
        type: String,
        required: true
      },
      value: {
        type: String,
        required: true
      },
      isActive: {
        type: Boolean,
        default: true
      }
    }]
  },
  
  // FAQ Section
  faqSection: {
    isEnabled: {
      type: Boolean,
      default: true
    },
    title: {
      type: String,
      default: '‚ùì C√¢u H·ªèi Th∆∞·ªùng G·∫∑p'
    },
    faqs: [{
      question: {
        type: String,
        required: true
      },
      answer: {
        type: String,
        required: true
      },
      category: {
        type: String,
        enum: ['general', 'technical', 'billing', 'features', 'troubleshooting'],
        default: 'general'
      },
      priority: {
        type: Number,
        default: 0 // Higher number = higher priority
      },
      isActive: {
        type: Boolean,
        default: true
      }
    }]
  },
  
  // Guidelines for contacting support
  contactGuidelines: {
    isEnabled: {
      type: Boolean,
      default: true
    },
    title: {
      type: String,
      default: 'L∆∞u √Ω khi li√™n h·ªá:'
    },
    guidelines: [{
      text: {
        type: String,
        required: true
      },
      isActive: {
        type: Boolean,
        default: true
      }
    }]
  },
  
  // Support Hours
  supportHours: {
    isEnabled: {
      type: Boolean,
      default: false
    },
    timezone: {
      type: String,
      default: 'Asia/Ho_Chi_Minh'
    },
    schedule: [{
      dayOfWeek: {
        type: String,
        enum: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'],
        required: true
      },
      startTime: {
        type: String, // Format: "09:00"
        required: true
      },
      endTime: {
        type: String, // Format: "18:00"
        required: true
      },
      isActive: {
        type: Boolean,
        default: true
      }
    }]
  },
  
  // Quick Links Section
  quickLinks: {
    isEnabled: {
      type: Boolean,
      default: true
    },
    title: {
      type: String,
      default: 'üîó Li√™n K·∫øt H·ªØu √çch'
    },
    links: [{
      title: {
        type: String,
        required: true
      },
      url: {
        type: String,
        required: true
      },
      description: {
        type: String
      },
      icon: {
        type: String, // Emoji or CSS class
        default: 'üîó'
      },
      isActive: {
        type: Boolean,
        default: true
      }
    }]
  },
  
  // Announcement/Notice Section
  announcement: {
    isEnabled: {
      type: Boolean,
      default: false
    },
    type: {
      type: String,
      enum: ['info', 'warning', 'success', 'error'],
      default: 'info'
    },
    title: {
      type: String
    },
    message: {
      type: String
    },
    expiresAt: {
      type: Date // Auto-hide after this date
    }
  },
  
  // Styling Options
  styling: {
    primaryColor: {
      type: String,
      default: '#3B82F6' // Blue
    },
    accentColor: {
      type: String,
      default: '#10B981' // Teal
    },
    backgroundColor: {
      type: String,
      default: '#FFFFFF'
    }
  },
  
  // Meta Information
  isActive: {
    type: Boolean,
    default: true
  },
  lastUpdatedBy: {
    type: String, // Admin username who last updated
    default: 'system'
  },
  version: {
    type: Number,
    default: 1
  }
}, {
  timestamps: true
});

// Create indexes for better query performance
SupportContentSchema.index({ isActive: 1 });
SupportContentSchema.index({ 'faqSection.faqs.category': 1 });
SupportContentSchema.index({ 'faqSection.faqs.priority': -1 });

// Method to get active FAQs sorted by priority
SupportContentSchema.methods.getActiveFAQs = function(category = null) {
  let faqs = this.faqSection.faqs.filter(faq => faq.isActive);
  
  if (category) {
    faqs = faqs.filter(faq => faq.category === category);
  }
  
  return faqs.sort((a, b) => b.priority - a.priority);
};

// Method to get active contact methods
SupportContentSchema.methods.getActiveContacts = function() {
  return this.contactInfo.secondaryContacts.filter(contact => contact.isActive);
};

// Method to get active quick links
SupportContentSchema.methods.getActiveQuickLinks = function() {
  return this.quickLinks.links.filter(link => link.isActive);
};

// Static method to get or create default support content
SupportContentSchema.statics.getDefault = async function() {
  let supportContent = await this.findOne({ isActive: true });
  
  if (!supportContent) {
    // Create default support content
    supportContent = new this({
      // Default FAQ entries
      faqSection: {
        faqs: [
          {
            question: 'L√†m th·∫ø n√†o ƒë·ªÉ s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng AI trong tool?',
            answer: 'Tool AI Story cung c·∫•p nhi·ªÅu module kh√°c nhau nh∆∞ vi·∫øt truy·ªán, t√≥m t·∫Øt n·ªôi dung, t·∫°o ·∫£nh, text-to-speech. B·∫°n c·∫ßn c√†i ƒë·∫∑t API key trong ph·∫ßn Settings tr∆∞·ªõc khi s·ª≠ d·ª•ng.',
            category: 'features',
            priority: 10
          },
          {
            question: 'T√¥i g·∫∑p l·ªói khi t·∫°o n·ªôi dung, ph·∫£i l√†m sao?',
            answer: 'H√£y ki·ªÉm tra: 1) API key c√≤n credits kh√¥ng, 2) K·∫øt n·ªëi internet ·ªïn ƒë·ªãnh kh√¥ng, 3) Th·ª≠ refresh trang v√† th·ª±c hi·ªán l·∫°i. N·∫øu v·∫´n l·ªói, li√™n h·ªá support.',
            category: 'troubleshooting',
            priority: 9
          },
          {
            question: 'Tool c√≥ h·ªó tr·ª£ ti·∫øng Vi·ªát kh√¥ng?',
            answer: 'C√≥, tool ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát cho ng∆∞·ªùi Vi·ªát v·ªõi giao di·ªán v√† t√≠nh nƒÉng ho√†n to√†n ti·∫øng Vi·ªát. B·∫°n c√≥ th·ªÉ t·∫°o n·ªôi dung b·∫±ng nhi·ªÅu ng√¥n ng·ªØ kh√°c nhau.',
            category: 'general',
            priority: 8
          },
          {
            question: 'L√†m th·∫ø n√†o ƒë·ªÉ n√¢ng c·∫•p t√†i kho·∫£n?',
            answer: 'Truy c·∫≠p trang Pricing ƒë·ªÉ xem c√°c g√≥i subscription. Li√™n h·ªá support ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ thanh to√°n v√† k√≠ch ho·∫°t g√≥i premium.',
            category: 'billing',
            priority: 7
          }
        ]
      },
      
      // Default contact guidelines
      contactGuidelines: {
        guidelines: [
          { text: 'Vui l√≤ng cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ v·∫•n ƒë·ªÅ b·∫°n g·∫∑p ph·∫£i.' },
          { text: 'N·∫øu c√≥ th·ªÉ, h√£y k√®m theo ·∫£nh ch·ª•p m√†n h√¨nh ho·∫∑c video m√¥ t·∫£ l·ªói.' },
          { text: 'Th·ªùi gian ph·∫£n h·ªìi c√≥ th·ªÉ t·ª´ v√†i ph√∫t ƒë·∫øn v√†i gi·ªù t√πy thu·ªôc v√†o s·ªë l∆∞·ª£ng y√™u c·∫ßu.' }
        ]
      },
      
      // Default quick links
      quickLinks: {
        links: [
          {
            title: 'H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng',
            url: '/tutorials',
            description: 'Xem video h∆∞·ªõng d·∫´n chi ti·∫øt c√°c t√≠nh nƒÉng',
            icon: 'üìö'
          },
          {
            title: 'C√†i ƒë·∫∑t API Keys',
            url: '/settings',
            description: 'H∆∞·ªõng d·∫´n c·∫•u h√¨nh API keys cho c√°c d·ªãch v·ª• AI',
            icon: 'üîë'
          },
          {
            title: 'B·∫£ng gi√° d·ªãch v·ª•',
            url: '/pricing',
            description: 'Xem th√¥ng tin c√°c g√≥i subscription',
            icon: 'üí∞'
          }
        ]
      }
    });
    
    await supportContent.save();
  }
  
  return supportContent;
};

module.exports = mongoose.model('SupportContent', SupportContentSchema);